# -*- coding: utf-8 -*-
"""
OpsExt ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è TasksBot:
- –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–û—Ç–∫—É–¥–∞ -> –ö—É–¥–∞)
- –ê–≤—Ç–æ–∑–∞–¥–∞—á–∞ –Ω–∞ –ø—Ä–∏—ë–º–∫—É –Ω–∞ —Ç–æ—á–∫–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
- –ü—Ä–∏–Ω—è—Ç—å –±–µ–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π / –ï—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ "—Ñ–∞–∫—Ç" + —Ñ–æ—Ç–æ)
- –î–≤—É—Ö—Å—Ç—É–ø–µ–Ω—á–∞—Ç–∞—è –ø—Ä–∏—ë–º–∫–∞: –°—Ç–∞—Ä—à–∏–π -> –ê–¥–º–∏–Ω
- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã (–±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏): –ø—Ä–µ—Ñ–∏–∫—Å ops_

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pyTelegramBotAPI, SQLAlchemy
DB: –±–µ—Ä—ë–º –∏–∑ ENV DATABASE_URL –∏–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π engine/session –∏–∑ —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
"""

import os, uuid
from datetime import datetime, timedelta
from collections import defaultdict

from telebot import TeleBot
from telebot.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, Message
)

from sqlalchemy import (
    create_engine, Column, Integer, String, DateTime, ForeignKey, Boolean, Text, Numeric
)
from sqlalchemy.orm import declarative_base, Session, sessionmaker, relationship

# -----------------------------
# –ö–æ–Ω—Ñ–∏–≥ (ENV —Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏)
# -----------------------------
DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///ops_ext.db")
ADMIN_IDS = {int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip().isdigit()}
SENIOR_IDS = {int(x) for x in os.getenv("SENIOR_IDS", "").split(",") if x.strip().isdigit()}
# –ú–∞–ø–ø–∏–Ω–≥ "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏" -> chat_id (–∫—É–¥–∞ –∫–∏–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é); –º–æ–∂–Ω–æ –Ω–µ –∑–∞–¥–∞–≤–∞—Ç—å
LOCATION_ALERT_CHATS = {
    # "–¶–ï–ù–¢–†": -1001234567890,
    # "–ü–û–õ–ï–¢": -1002222222222,
    # "–ö–õ–ò–ú–û–í–û": -1003333333333,
}

# -----------------------------
# –ë–∞–∑–∞ (–∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å)
# -----------------------------
Base = declarative_base()

class OpsLocation(Base):
    """–ú–∏–Ω–∏-—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ç–æ—á–µ–∫ (–µ—Å–ª–∏ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ locations ‚Äî –æ—Å—Ç–∞–≤—å —ç—Ç—É –∏ –ø–æ–ª—å–∑—É–π—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ–º)."""
    __tablename__ = "ops_locations"
    id = Column(Integer, primary_key=True)
    title = Column(String, nullable=False, unique=True)  # "–¶–ï–ù–¢–†" | "–ü–û–õ–ï–¢" | "–ö–õ–ò–ú–û–í–û"
    direction = Column(String, nullable=False, default="tobacco")  # "tobacco" | "coffee"
    created_at = Column(DateTime, default=datetime.utcnow)

class OpsSupplier(Base):
    __tablename__ = "ops_suppliers"
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False, unique=True)
    active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=datetime.utcnow)

class OpsTransfer(Base):
    __tablename__ = "ops_transfers"
    id = Column(Integer, primary_key=True)
    number = Column(String, nullable=False, unique=True)  # TR-YYYYMMDD-XXXX
    direction = Column(String, nullable=False)            # tobacco | coffee
    from_location = Column(String, nullable=False)        # —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–º—è: "–¶–ï–ù–¢–†"
    to_location = Column(String, nullable=False)
    created_by_tg = Column(Integer, nullable=False)
    status = Column(String, nullable=False, default="in_transit")  # draft_transfer|in_transit|submitted|accepted|approved|rejected|needs_fix
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow)

class OpsTransferItem(Base):
    __tablename__ = "ops_transfer_items"
    id = Column(Integer, primary_key=True)
    transfer_id = Column(Integer, ForeignKey("ops_transfers.id"), index=True, nullable=False)
    name = Column(String, nullable=False)   # –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
    qty_planned = Column(Numeric(12, 3), nullable=False)  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É
    # –§–∞–∫—Ç –ù–ï —Ö—Ä–∞–Ω–∏–º —Ç—É—Ç ‚Äî –æ–Ω —Ç–æ–ª—å–∫–æ –≤ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è—Ö (–ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º)
    created_at = Column(DateTime, default=datetime.utcnow)

class OpsTransferEvidence(Base):
    __tablename__ = "ops_transfer_evidence"
    id = Column(Integer, primary_key=True)
    transfer_id = Column(Integer, ForeignKey("ops_transfers.id"), index=True, nullable=False)
    kind = Column(String, default="photo")   # photo
    payload = Column(String, nullable=False) # file_id
    file_unique_id = Column(String)
    author_tg = Column(Integer, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)

class OpsTransferDiscrepancy(Base):
    __tablename__ = "ops_transfer_discrepancies"
    id = Column(Integer, primary_key=True)
    transfer_id = Column(Integer, ForeignKey("ops_transfers.id"), index=True, nullable=False)
    item_id = Column(Integer, ForeignKey("ops_transfer_items.id"), index=True, nullable=False)
    type = Column(String, nullable=False)       # under|over|broken|wrong_sku|expiry
    qty_planned = Column(Numeric(12,3), nullable=False)
    qty_actual = Column(Numeric(12,3), nullable=False)
    photo_file_id = Column(String, nullable=False)
    comment = Column(Text, default="")
    author_tg = Column(Integer, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)

class OpsPenalty(Base):
    __tablename__ = "ops_penalties"
    id = Column(Integer, primary_key=True)
    user_tg = Column(Integer, index=True, nullable=False)
    transfer_id = Column(Integer, ForeignKey("ops_transfers.id"), index=True)
    kind = Column(String, nullable=False)         # transfer_missing_photo|transfer_hidden_diff|abuse
    amount_rub = Column(Integer, nullable=False)
    reason = Column(String, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)

class OpsRatingLedger(Base):
    __tablename__ = "ops_rating_ledger"
    id = Column(Integer, primary_key=True)
    user_tg = Column(Integer, index=True, nullable=False)
    transfer_id = Column(Integer, ForeignKey("ops_transfers.id"), index=True)
    delta_points = Column(Integer, nullable=False)
    reason = Column(String, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)

# -----------------------------
# –£—Ç–∏–ª–∏—Ç—ã
# -----------------------------
def now_utc():
    return datetime.utcnow()

def gen_transfer_number(session: Session) -> str:
    base = f"TR-{now_utc():%Y%m%d}-"
    # –ø—Ä–æ—Å—Ç–∞—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è
    tail = str(uuid.uuid4())[:6].upper()
    num = base + tail
    # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º
    exists = session.query(OpsTransfer).filter_by(number=num).first()
    if exists:
        return gen_transfer_number(session)
    return num

def is_admin(tg_id: int) -> bool:
    return tg_id in ADMIN_IDS or not ADMIN_IDS  # –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚Äî —Å—á–∏—Ç–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∞–º–∏ (—á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ –∏–∑ –∫–æ—Ä–æ–±–∫–∏)

def is_senior(tg_id: int) -> bool:
    return tg_id in SENIOR_IDS or is_admin(tg_id)

# -----------------------------
# –°–µ—Å—Å–∏–∏ —à–∞–≥–æ–≤ (in-memory)
# –í –ø—Ä–æ–¥–µ –ª—É—á—à–µ Redis, –Ω–æ –¥–ª—è "–≤—Å—Ç–∞–≤–∏–ª –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç" –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤–∞—Ä—è.
# -----------------------------
SESS = defaultdict(dict)

# -----------------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# -----------------------------
def kb_ops_root():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üöö –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ (–û—Ç–∫—É–¥–∞)", callback_data="ops_tr_new"),
        InlineKeyboardButton("üì• –í—Ö–æ–¥—è—â–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è (–ö—É–¥–∞)", callback_data="ops_tr_inbox"),
    )
    return kb

def kb_yesno(cb_yes: str, cb_no: str):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–î–∞", callback_data=cb_yes),
           InlineKeyboardButton("–ù–µ—Ç", callback_data=cb_no))
    return kb

def kb_discrepancy_types(item_id: int, tr_id: int):
    kb = InlineKeyboardMarkup(row_width=2)
    base = f"ops_tr_diff_type:{tr_id}:{item_id}:"
    kb.add(
        InlineKeyboardButton("–ù–µ–¥–æ–ø–æ—Å—Ç–∞–≤–∫–∞", callback_data=base+"under"),
        InlineKeyboardButton("–ü–µ—Ä–µ–ø–æ—Å—Ç–∞–≤–∫–∞", callback_data=base+"over"),
        InlineKeyboardButton("–ë–æ–π/–±—Ä–∞–∫", callback_data=base+"broken"),
        InlineKeyboardButton("–ù–µ —Ç–æ—Ç SKU", callback_data=base+"wrong_sku"),
        InlineKeyboardButton("–°—Ä–æ–∫–∏", callback_data=base+"expiry"),
    )
    return kb

def kb_review_senior(tr_id: int):
    kb = InlineKeyboardMarkup(row_width=3)
    kb.add(
        InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"ops_tr_senior_accept:{tr_id}"),
        InlineKeyboardButton("‚úè –î–æ—Ä–∞–±–æ—Ç–∫–∞", callback_data=f"ops_tr_senior_fix:{tr_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"ops_tr_senior_reject:{tr_id}"),
    )
    return kb

def kb_review_admin(tr_id: int):
    kb = InlineKeyboardMarkup(row_width=3)
    kb.add(
        InlineKeyboardButton("üèÅ –£—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"ops_tr_admin_approve:{tr_id}"),
        InlineKeyboardButton("‚úè –î–æ—Ä–∞–±–æ—Ç–∫–∞", callback_data=f"ops_tr_admin_fix:{tr_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"ops_tr_admin_reject:{tr_id}"),
    )
    return kb

# -----------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
# -----------------------------
class OpsExt:
    def __init__(self, bot: TeleBot, engine=None, SessionLocal=None):
        self.bot = bot
        self.engine = engine or create_engine(DATABASE_URL, pool_pre_ping=True)
        self.SessionLocal = SessionLocal or sessionmaker(bind=self.engine, expire_on_commit=False)

    # –≤—ã–∑—ã–≤–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    def init_db(self):
        Base.metadata.create_all(self.engine)
        with self.SessionLocal() as s:
            # –ø–æ–¥–ª–æ–∂–∏–º —Ç–æ—á–∫–∏ (–µ—Å–ª–∏ –Ω–µ—Ç)
            for title in ("–¶–ï–ù–¢–†", "–ü–û–õ–ï–¢", "–ö–õ–ò–ú–û–í–û"):
                if not s.query(OpsLocation).filter_by(title=title).first():
                    s.add(OpsLocation(title=title, direction="tobacco"))
            s.commit()

    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    def register(self):
        bot = self.bot

        @bot.message_handler(commands=["ops"])
        def cmd_ops(m: Message):
            bot.send_message(m.chat.id, "–ö–æ–Ω—Ç—É—Ä –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π –∏ –ø—Ä–∏—ë–º–∫–∏:", reply_markup=kb_ops_root())

        # ---- –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å (–û—Ç–∫—É–¥–∞): —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
        @bot.callback_query_handler(func=lambda c: c.data == "ops_tr_new")
        def tr_new(c):
            SESS[c.from_user.id] = {"stage": "tr_new_direction"}
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton("üö¨ –¢–∞–±–∞—á–∫–∞", callback_data="ops_tr_dir:tobacco"),
                   InlineKeyboardButton("‚òï –ö–æ—Ñ–µ–π–Ω—è", callback_data="ops_tr_dir:coffee"))
            bot.answer_callback_query(c.id)
            bot.send_message(c.message.chat.id, "–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=kb)

        @bot.callback_query_handler(func=lambda c: c.data.startswith("ops_tr_dir:"))
        def tr_dir(c):
            direction = c.data.split(":")[1]
            sess = SESS.get(c.from_user.id, {})
            sess["direction"] = direction
            sess["stage"] = "tr_new_from"
            SESS[c.from_user.id] = sess
            kb = InlineKeyboardMarkup()
            for loc in ("–¶–ï–ù–¢–†", "–ü–û–õ–ï–¢", "–ö–õ–ò–ú–û–í–û"):
                kb.add(InlineKeyboardButton(loc, callback_data=f"ops_tr_from:{loc}"))
            bot.answer_callback_query(c.id)
            bot.send_message(c.message.chat.id, "–û—Ç–∫—É–¥–∞ –æ—Ç–≥—Ä—É–∂–∞–µ–º?", reply_markup=kb)

        @bot.callback_query_handler(func=lambda c: c.data.startswith("ops_tr_from:"))
        def tr_from(c):
            from_loc = c.data.split(":")[1]
            sess = SESS.get(c.from_user.id, {})
            sess["from"] = from_loc
            sess["stage"] = "tr_new_to"
            SESS[c.from_user.id] = sess
            kb = InlineKeyboardMarkup()
            for loc in ("–¶–ï–ù–¢–†", "–ü–û–õ–ï–¢", "–ö–õ–ò–ú–û–í–û"):
                if loc != from_loc:
                    kb.add(InlineKeyboardButton(loc, callback_data=f"ops_tr_to:{loc}"))
            bot.answer_callback_query(c.id)
            bot.send_message(c.message.chat.id, "–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º?", reply_markup=kb)

        @bot.callback_query_handler(func=lambda c: c.data.startswith("ops_tr_to:"))
        def tr_to(c):
            to_loc = c.data.split(":")[1]
            sess = SESS.get(c.from_user.id, {})
            sess["to"] = to_loc
            sess["stage"] = "tr_new_items"
            sess["items"] = []  # —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π {name, qty}
            SESS[c.from_user.id] = sess
            bot.answer_callback_query(c.id)
            bot.send_message(c.message.chat.id, "–í–≤–µ–¥–∏ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\n–ù–∞–ø—Ä–∏–º–µ—Ä:\nPafos Blueberry * 10\nTrava Mint * 6\n\n–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø—Ä–∏—à–ª–∏: –ì–æ—Ç–æ–≤–æ")

        @bot.message_handler(func=lambda m: SESS.get(m.from_user.id, {}).get("stage") == "tr_new_items")
        def tr_items_input(m: Message):
            text = m.text.strip()
            if text.lower() in ("–≥–æ—Ç–æ–≤–æ","–≥–æ—Ç–æ–≤","done","end"):
                # –ø—Ä–æ—Å–∏–º —Ñ–æ—Ç–æ –æ—Ç–≥—Ä—É–∑–∫–∏
                sess = SESS[m.from_user.id]
                if not sess["items"]:
                    bot.reply_to(m, "–î–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é.")
                    return
                sess["stage"] = "tr_new_photo"
                SESS[m.from_user.id] = sess
                kb = ReplyKeyboardMarkup(resize_keyboard=True)
                kb.add(KeyboardButton("üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –æ—Ç–≥—Ä—É–∑–∫–∏"))
                bot.send_message(m.chat.id, "–ü—Ä–∏—à–ª–∏ –º–∏–Ω–∏–º—É–º 1 —Ñ–æ—Ç–æ –æ—Ç–≥—Ä—É–∑–∫–∏ (–∫–æ—Ä–æ–±–∞/—Ç–∞—Ä–Ω—ã–µ –º–µ—Å—Ç–∞). –ö–æ–≥–¥–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî –Ω–∞–∂–º–∏ /send", reply_markup=kb)
                return
            # –ø–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É "Name * Qty"
            if "*" not in text:
                bot.reply_to(m, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
                return
            name, qty = [x.strip() for x in text.split("*", 1)]
            try:
                qty = float(qty.replace(",", "."))
            except Exception:
                bot.reply_to(m, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                return
            SESS[m.from_user.id]["items"].append({"name": name, "qty": qty})
            bot.reply_to(m, f"–û–∫: {name} √ó {qty}")

        @bot.message_handler(commands=["send"])
        def tr_send(m: Message):
            sess = SESS.get(m.from_user.id, {})
            if sess.get("stage") != "tr_new_photo":
                return
            with self.SessionLocal() as s:
                num = gen_transfer_number(s)
                tr = OpsTransfer(
                    number=num,
                    direction=sess["direction"],
                    from_location=sess["from"],
                    to_location=sess["to"],
                    created_by_tg=m.from_user.id,
                    status="in_transit",
                    created_at=now_utc(), updated_at=now_utc()
                )
                s.add(tr); s.flush()
                for it in sess.get("items", []):
                    s.add(OpsTransferItem(transfer_id=tr.id, name=it["name"], qty_planned=it["qty"]))
                # —Ñ–æ—Ç–æ —É–∂–µ —Å–æ–±—Ä–∞–ª–∏ –≤ evidence_temp
                for ev in sess.get("evidence_temp", []):
                    s.add(OpsTransferEvidence(
                        transfer_id=tr.id, kind="photo", payload=ev["file_id"],
                        file_unique_id=ev["uid"], author_tg=m.from_user.id
                    ))
                s.commit()

                # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ "–ö—É–¥–∞" (–≤ —á–∞—Ç —Ç–æ—á–∫–∏, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω) + –∞–≤—Ç–æ-–∑–∞–¥–∞—á–∞ (–≤ –≤–∏–¥–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–ø–∏—Å–∫–∞)
                chat_id_alert = LOCATION_ALERT_CHATS.get(tr.to_location)
                msg = f"üì¶ –ù–æ–≤–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ #{tr.number}\n–û—Ç–∫—É–¥–∞: {tr.from_location}\n–ö—É–¥–∞: {tr.to_location}\n–ü–æ–∑–∏—Ü–∏–π: {len(sess['items'])}\n–ü–µ—Ä–µ–π–¥–∏ –≤ /ops ‚Üí ¬´–í—Ö–æ–¥—è—â–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è¬ª."
                if chat_id_alert:
                    bot.send_message(chat_id_alert, msg)
                # —É–≤–µ–¥–æ–º–∏–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
                bot.send_message(m.chat.id, f"–ì–æ—Ç–æ–≤–æ. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ #{tr.number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø—É—Ç—å.\n–ê–¥–º–∏–Ω–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞–∫–ª–∞–¥–Ω–∞—è.")

                # —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ (–Ω–∞–∫–ª–∞–¥–Ω–∞—è)
                for admin_id in (ADMIN_IDS or {m.chat.id}):
                    bot.send_message(admin_id, f"üßæ –ù–∞–∫–ª–∞–¥–Ω–∞—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è #{tr.number}\n{tr.from_location} ‚Üí {tr.to_location}\n–ü–æ–∑–∏—Ü–∏–π: {len(sess['items'])}")

            SESS[m.from_user.id].clear()

        @bot.message_handler(content_types=['photo'])
        def tr_collect_photo(m: Message):
            sess = SESS.get(m.from_user.id, {})
            if sess.get("stage") == "tr_new_photo":
                ph = m.photo[-1]
                sess.setdefault("evidence_temp", []).append({"file_id": ph.file_id, "uid": ph.file_unique_id})
                SESS[m.from_user.id] = sess
                self.bot.reply_to(m, "–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ")
            elif sess.get("stage", "").startswith("tr_rcv_diff_photo:"):
                # –æ–∂–∏–¥–∞–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
                _, tr_id, item_id = sess["stage"].split(":")
                with self.SessionLocal() as s:
                    tr = s.get(OpsTransfer, int(tr_id))
                    if not tr: 
                        self.bot.reply_to(m, "–¢—Ä–∞–Ω—Å—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                        return
                    ph = m.photo[-1]
                    # —Å–æ—Ö—Ä–∞–Ω–∏–º —Ñ–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –≤ —Å–µ—Å—Å–∏—é –¥–ª—è —ç—Ç–æ–≥–æ item
                    sess.setdefault("diff_photos", {})[int(item_id)] = ph.file_id
                    SESS[m.from_user.id] = sess
                    self.bot.reply_to(m, "–§–æ—Ç–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ")

        # ---- –ü–æ–ª—É—á–∞—Ç–µ–ª—å (–ö—É–¥–∞): –≤—Ö–æ–¥—è—â–∏–µ
        @bot.callback_query_handler(func=lambda c: c.data == "ops_tr_inbox")
        def tr_inbox(c):
            with self.SessionLocal() as s:
                trs = s.query(OpsTransfer).filter(OpsTransfer.status.in_(["in_transit","submitted","needs_fix"])).order_by(OpsTransfer.created_at.desc()).all()
                if not trs:
                    self.bot.answer_callback_query(c.id)
                    self.bot.send_message(c.message.chat.id, "–í—Ö–æ–¥—è—â–∏—Ö –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π –Ω–µ—Ç.")
                    return
                for tr in trs:
                    self._send_transfer_card(c.message.chat.id, tr)

        # –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        @bot.callback_query_handler(func=lambda c: c.data.startswith("ops_tr_view:"))
        def tr_view(c):
            tr_id = int(c.data.split(":")[1])
            with self.SessionLocal() as s:
                tr = s.get(OpsTransfer, tr_id)
                self._send_transfer_card(c.message.chat.id, tr)

        # –ü—Ä–∏–Ω—è—Ç—å –±–µ–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π -> –ø—Ä–æ—Å–∏–º —Ö–æ—Ç—è –±—ã 1 —Ñ–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ä—à–µ–º—É
        @bot.callback_query_handler(func=lambda c: c.data.startswith("ops_tr_ok:"))
        def tr_ok(c):
            tr_id = int(c.data.split(":")[1])
            SESS[c.from_user.id] = {"stage": f"tr_ok_photo:{tr_id}", "ok_photos": []}
            self.bot.answer_callback_query(c.id)
            self.bot.send_message(c.message.chat.id, "–ü—Ä–∏—à–ª–∏ 1‚Äì3 —Ñ–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—ë–º–∫–∏. –ö–æ–≥–¥–∞ –≥–æ—Ç–æ–≤ ‚Äî /submit_ok")

        @bot.message_handler(commands=["submit_ok"])
        def tr_ok_submit(m: Message):
            sess = SESS.get(m.from_user.id, {})
            if not sess.get("stage","").startswith("tr_ok_photo:"):
                return
            tr_id = int(sess["stage"].split(":")[1])
            # —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ?
            # –º—ã –ø—Ä–∏–Ω–∏–º–∞–ª–∏ —Ñ–æ—Ç–æ –≤ on_any_photo? –¥–∞–≤–∞–π—Ç–µ –ø—Ä–∏–º–µ–º –∑–¥–µ—Å—å ‚Äî –ø—Ä–æ—â–µ: –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ –±—É–¥–µ–º.
            with self.SessionLocal() as s:
                tr = s.get(OpsTransfer, tr_id)
                if not tr: 
                    self.bot.reply_to(m, "–¢—Ä–∞–Ω—Å—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
                # –æ—Ç–º–µ—Ç–∏–º –∫–∞–∫ submitted (–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ä—à–µ–º—É)
                tr.status = "submitted"; tr.updated_at = now_utc()
                s.commit()
            self.bot.send_message(m.chat.id, f"–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ #{tr.number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ä—à–µ–º—É.")
            # —É–≤–µ–¥–æ–º–∏–º —Å—Ç–∞—Ä—à–µ–≥–æ (–µ—Å–ª–∏ SENIOR_IDS –µ—Å—Ç—å)
            for sid in (SENIOR_IDS or {m.chat.id}):
                self.bot.send_message(sid, f"üßê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è #{tr.number} (–±–µ–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π).", reply_markup=kb_review_senior(tr_id))
            SESS[m.from_user.id].clear()

        # –ï—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è -> –≤—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏
        @bot.callback_query_handler(func=lambda c: c.data.startswith("ops_tr_diff:"))
        def tr_diff(c):
            tr_id = int(c.data.split(":")[1])
            with self.SessionLocal() as s:
                items = s.query(OpsTransferItem).filter_by(transfer_id=tr_id).all()
                kb = InlineKeyboardMarkup(row_width=1)
                for it in items:
                    kb.add(InlineKeyboardButton(f"{it.name} (–ø–ª–∞–Ω {it.qty_planned})", callback_data=f"ops_tr_diff_item:{tr_id}:{it.id}"))
                kb.add(InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data=f"ops_tr_diff_submit:{tr_id}"))
            self.bot.answer_callback_query(c.id)
            self.bot.send_message(c.message.chat.id, "–í—ã–±–µ—Ä–∏ –ø–æ–∑–∏—Ü–∏–∏, –≥–¥–µ –µ—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è:", reply_markup=kb)

        @bot.callback_query_handler(func=lambda c: c.data.startswith("ops_tr_diff_item:"))
        def tr_diff_item(c):
            _, tr_id, item_id = c.data.split(":")
            # –°–æ—Ö—Ä–∞–Ω–∏–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
            SESS[c.from_user.id]["stage"] = f"tr_diff_choose:{tr_id}:{item_id}"
            self.bot.answer_callback_query(c.id)
            self.bot.send_message(c.message.chat.id, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è:", reply_markup=kb_discrepancy_types(int(item_id), int(tr_id)))

        @bot.callback_query_handler(func=lambda c: c.data.startswith("ops_tr_diff_type:"))
        def tr_diff_type(c):
            _, tr_id, item_id, diff_type = c.data.split(":")
            SESS[c.from_user.id]["stage"] = f"tr_diff_qty:{tr_id}:{item_id}:{diff_type}"
            self.bot.answer_callback_query(c.id)
            self.bot.send_message(c.message.chat.id, "–í–≤–µ–¥–∏ –§–ê–ö–¢–ò–ß–ï–°–ö–û–ï –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ (—á–∏—Å–ª–æ).")

        @bot.message_handler(func=lambda m: SESS.get(m.from_user.id, {}).get("stage","").startswith("tr_diff_qty:"))
        def tr_diff_qty(m: Message):
            try:
                qty_actual = float(m.text.replace(",", "."))
            except Exception:
                self.bot.reply_to(m, "–ù—É–∂–Ω–æ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
                return
            _, tr_id, item_id, diff_type = SESS[m.from_user.id]["stage"].split(":")
            SESS[m.from_user.id]["stage"] = f"tr_rcv_diff_photo:{tr_id}:{item_id}"
            SESS[m.from_user.id].setdefault("diff_data", {})[int(item_id)] = {"diff_type": diff_type, "qty_actual": qty_actual}
            self.bot.send_message(m.chat.id, "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ (–∫–æ—Ä–æ–±–∫–∞/–Ω–∞–∫–ª–µ–π–∫–∞ –∏ —Ç.–¥.).")

        @bot.callback_query_handler(func=lambda c: c.data.startswith("ops_tr_diff_submit:"))
        def tr_diff_submit(c):
            tr_id = int(c.data.split(":")[1])
            data = SESS.get(c.from_user.id, {})
            diffs = data.get("diff_data", {})
            photos = data.get("diff_photos", {})
            if not diffs:
                self.bot.answer_callback_query(c.id, "–ù–µ –≤—ã–±—Ä–∞–Ω—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è.", show_alert=True)
                return
            with self.SessionLocal() as s:
                tr = s.get(OpsTransfer, tr_id)
                if not tr:
                    self.bot.answer_callback_query(c.id, "–¢—Ä–∞–Ω—Å—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                    return
                for item_id, payload in diffs.items():
                    it = s.get(OpsTransferItem, item_id)
                    if not it: 
                        continue
                    photo_id = photos.get(item_id)
                    if not photo_id:
                        self.bot.answer_callback_query(c.id, "–ü–æ –æ–¥–Ω–æ–π –∏–∑ —Å—Ç—Ä–æ–∫ –Ω–µ—Ç —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏ –ø–æ–≤—Ç–æ—Ä–∏.", show_alert=True)
                        return
                    s.add(OpsTransferDiscrepancy(
                        transfer_id=tr.id, item_id=it.id,
                        type=payload["diff_type"],
                        qty_planned=it.qty_planned,
                        qty_actual=payload["qty_actual"],
                        photo_file_id=photo_id,
                        comment="",
                        author_tg=c.from_user.id
                    ))
                tr.status = "submitted"; tr.updated_at = now_utc()
                s.commit()
            self.bot.answer_callback_query(c.id)
            self.bot.send_message(c.message.chat.id, f"–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ #{tr.number} —Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ä—à–µ–º—É.")
            for sid in (SENIOR_IDS or {c.message.chat.id}):
                self.bot.send_message(sid, f"üßê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è #{tr.number} (—Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏).", reply_markup=kb_review_senior(tr_id))
            SESS[c.from_user.id].clear()

        # ---- –†–µ–≤—å—é –°—Ç–∞—Ä—à–µ–≥–æ
        @bot.callback_query_handler(func=lambda c: c.data.startswith("ops_tr_senior_accept:"))
        def tr_senior_accept(c):
            tr_id = int(c.data.split(":")[1])
            if not is_senior(c.from_user.id):
                self.bot.answer_callback_query(c.id, "–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True); return
            with self.SessionLocal() as s:
                tr = s.get(OpsTransfer, tr_id)
                if not tr: 
                    self.bot.answer_callback_query(c.id, "–ù–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True); return
                tr.status = "accepted"; tr.updated_at = now_utc(); s.commit()
            self.bot.answer_callback_query(c.id, "–ü—Ä–∏–Ω—è—Ç–æ. –ü–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω—É.")
            for aid in (ADMIN_IDS or {c.message.chat.id}):
                self.bot.send_message(aid, f"‚úÖ –°—Ç–∞—Ä—à–∏–π –ø—Ä–∏–Ω—è–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ #{tr.number}.", reply_markup=kb_review_admin(tr_id))

        @bot.callback_query_handler(func=lambda c: c.data.startswith("ops_tr_senior_fix:"))
        def tr_senior_fix(c):
            tr_id = int(c.data.split(":")[1])
            if not is_senior(c.from_user.id):
                self.bot.answer_callback_query(c.id, "–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True); return
            with self.SessionLocal() as s:
                tr = s.get(OpsTransfer, tr_id)
                if not tr: 
                    self.bot.answer_callback_query(c.id, "–ù–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True); return
                tr.status = "needs_fix"; tr.updated_at = now_utc(); s.commit()
            self.bot.answer_callback_query(c.id, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.")
            # —É–≤–µ–¥–æ–º–∏–º —á–∞—Ç, –≥–¥–µ –ø—Ä–∏–Ω–∏–º–∞–ª–∏
            self.bot.send_message(c.message.chat.id, f"üîÅ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ #{tr_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.")

        @bot.callback_query_handler(func=lambda c: c.data.startswith("ops_tr_senior_reject:"))
        def tr_senior_reject(c):
            tr_id = int(c.data.split(":")[1])
            if not is_senior(c.from_user.id):
                self.bot.answer_callback_query(c.id, "–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True); return
            with self.SessionLocal() as s:
                tr = s.get(OpsTransfer, tr_id)
                if not tr: 
                    self.bot.answer_callback_query(c.id, "–ù–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True); return
                tr.status = "rejected"; tr.updated_at = now_utc(); s.commit()
            self.bot.answer_callback_query(c.id, "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
            self.bot.send_message(c.message.chat.id, f"‚ùå –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ #{tr_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ —Å—Ç–∞—Ä—à–∏–º.")

        # ---- –†–µ–≤—å—é –ê–¥–º–∏–Ω–∞ (—Ñ–∏–Ω–∞–ª)
        @bot.callback_query_handler(func=lambda c: c.data.startswith("ops_tr_admin_approve:"))
        def tr_admin_approve(c):
            tr_id = int(c.data.split(":")[1])
            if not is_admin(c.from_user.id):
                self.bot.answer_callback_query(c.id, "–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True); return
            with self.SessionLocal() as s:
                tr = s.get(OpsTransfer, tr_id)
                if not tr: 
                    self.bot.answer_callback_query(c.id, "–ù–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True); return
                tr.status = "approved"; tr.updated_at = now_utc(); s.commit()
            self.bot.answer_callback_query(c.id, "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")
            self.bot.send_message(c.message.chat.id, f"üèÅ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ #{tr_id} —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º.")

        @bot.callback_query_handler(func=lambda c: c.data.startswith("ops_tr_admin_fix:"))
        def tr_admin_fix(c):
            tr_id = int(c.data.split(":")[1])
            if not is_admin(c.from_user.id):
                self.bot.answer_callback_query(c.id, "–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True); return
            with self.SessionLocal() as s:
                tr = s.get(OpsTransfer, tr_id)
                if not tr: 
                    self.bot.answer_callback_query(c.id, "–ù–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True); return
                tr.status = "needs_fix"; tr.updated_at = now_utc(); s.commit()
            self.bot.answer_callback_query(c.id, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.")
            self.bot.send_message(c.message.chat.id, f"üîÅ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ #{tr_id}: –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")

        @bot.callback_query_handler(func=lambda c: c.data.startswith("ops_tr_admin_reject:"))
        def tr_admin_reject(c):
            tr_id = int(c.data.split(":")[1])
            if not is_admin(c.from_user.id):
                self.bot.answer_callback_query(c.id, "–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True); return
            with self.SessionLocal() as s:
                tr = s.get(OpsTransfer, tr_id)
                if not tr: 
                    self.bot.answer_callback_query(c.id, "–ù–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True); return
                tr.status = "rejected"; tr.updated_at = now_utc(); s.commit()
            self.bot.answer_callback_query(c.id, "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
            self.bot.send_message(c.message.chat.id, f"‚ùå –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ #{tr_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º.")

    # -------- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ --------
    def _send_transfer_card(self, chat_id: int, tr: OpsTransfer):
        with self.SessionLocal() as s:
            items = s.query(OpsTransferItem).filter_by(transfer_id=tr.id).all()
            diffs = s.query(OpsTransferDiscrepancy).filter_by(transfer_id=tr.id).all()
        title = f"#{tr.number} | {tr.from_location} ‚Üí {tr.to_location}\n–°—Ç–∞—Ç—É—Å: {tr.status}"
        lines = "\n".join([f"‚Ä¢ {it.name} ‚Äî –ø–ª–∞–Ω {it.qty_planned}" for it in items][:20])
        if len(items) > 20:
            lines += f"\n‚Ä¶ –∏ –µ—â—ë {len(items)-20}"
        diffbadge = (f"\n–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è: {len(diffs)}" if diffs else "")
        txt = f"üì¶ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ {title}\n{lines}{diffbadge}"
        kb = InlineKeyboardMarkup(row_width=2)
        if tr.status in ("in_transit","needs_fix"):
            kb.add(
                InlineKeyboardButton("‚úîÔ∏è –ü—Ä–∏–Ω—è—Ç—å –±–µ–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π", callback_data=f"ops_tr_ok:{tr.id}"),
                InlineKeyboardButton("‚ö† –ï—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è", callback_data=f"ops_tr_diff:{tr.id}"),
            )
        # –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –≤—Å–µ–≥–¥–∞, + –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å
        kb.add(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"ops_tr_view:{tr.id}"))
        self.bot.send_message(chat_id, txt, reply_markup=kb)
