# -*- coding: utf-8 -*-
"""
TasksBot (polling, PostgreSQL)
- Telegram: pyTelegramBotAPI (TeleBot)
- –ë–∞–∑–∞: PostgreSQL (SQLAlchemy)
- –§–∏—á–∏:
  ‚Ä¢ –ó–∞–¥–∞—á–∏/–ø–æ–¥–∑–∞–¥–∞—á–∏, –¥–µ–¥–ª–∞–π–Ω—ã, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –ø–æ–∏—Å–∫
  ‚Ä¢ –ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å (—à–∞–±–ª–æ–Ω—ã): ¬´–∫–∞–∂–¥—ã–µ N –¥–Ω–µ–π¬ª, ¬´–∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫ 12:00¬ª, ¬´–ø–æ –ø–Ω,—Å—Ä‚Ä¶¬ª
  ‚Ä¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏ –∏ –∞–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ¬´–∑–∞–∫–∞–∑ ‚Üí –ø—Ä–∏—ë–º–∫–∞ ‚Üí —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑¬ª
  ‚Ä¢ –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
  ‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å: TZ, –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç 08:00 (–ª–æ–∫–∞–ª—å–Ω–∞—è TZ)
  ‚Ä¢ GPT‚Äë–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç (OPENAI_API_KEY, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
  ‚Ä¢ Directions/Rules: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è + –ø—Ä–∞–≤–∏–ª–∞ (daily/weekdays/every_n_days) c notify_time –∏ —Ä–∞–Ω–Ω–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
  ‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∑–∞–¥–∞—á: priority, task_type, direction_id, supplier_id, auto_key (–∞–Ω—Ç–∏‚Äë–¥—É–±–ª–∏)
  ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ callback‚Äô–∏ (CALLBACK_SECRET), /health, —Å–∏–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
Env:
  TELEGRAM_TOKEN, DATABASE_URL, TZ (default Europe/Moscow), OPENAI_API_KEY (optional),
  CALLBACK_SECRET (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏), ADMIN_IDS (–æ–ø—Ü., –∫–æ–º—É –¥–æ—Å—Ç—É–ø–µ–Ω /health)
"""

import os, re, json, time, hmac, hashlib, logging, threading
from datetime import datetime, timedelta, date, time as dtime
from typing import Optional

import pytz
import schedule

from telebot import TeleBot, types, apihelper
from sqlalchemy import (
    create_engine, Column, Integer, String, Text, Date, Time, DateTime, Boolean,
    ForeignKey, func, UniqueConstraint, Index, and_, or_
)
from sqlalchemy.orm import declarative_base, sessionmaker, scoped_session, relationship

# --------- ENV / LOG ---------
API_TOKEN   = os.getenv("TELEGRAM_TOKEN")
DB_URL      = os.getenv("DATABASE_URL")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TZ_NAME     = os.getenv("TZ", "Europe/Moscow")
CALLBACK_SECRET = os.getenv("CALLBACK_SECRET", "change-me").encode("utf-8")
ADMIN_IDS = {int(x) for x in os.getenv("ADMIN_IDS","").split(",") if x.strip().isdigit()}

if not API_TOKEN or not DB_URL:
    raise RuntimeError("Need TELEGRAM_TOKEN and DATABASE_URL envs")

LOCAL_TZ = pytz.timezone(TZ_NAME)
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("tasksbot")
log.info("Boot TasksBot v2025-08-21-rules-ui")

# --------- OpenAI (optional) ---------
openai_client = None
if OPENAI_API_KEY:
    try:
        from openai import OpenAI
        openai_client = OpenAI(api_key=OPENAI_API_KEY)
    except Exception as e:
        log.warning("OpenAI disabled: %s", e)

# --------- DB ---------
Base = declarative_base()
engine = create_engine(DB_URL, pool_pre_ping=True, future=True)
SessionLocal = scoped_session(sessionmaker(bind=engine, autoflush=False, autocommit=False))

class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True)  # Telegram chat id
    name = Column(String(255), default="")
    tz = Column(String(64), default="Europe/Moscow")
    digest_08 = Column(Boolean, default=True)
    created_at = Column(DateTime, server_default=func.now())

class Direction(Base):
    __tablename__ = "directions"
    id = Column(Integer, primary_key=True)
    name = Column(String(120), unique=True, nullable=False)
    emoji = Column(String(8), default="üìÇ")
    sort_order = Column(Integer, default=100)

class Supplier(Base):
    __tablename__ = "suppliers"
    id = Column(Integer, primary_key=True)
    name = Column(String(255), unique=True, nullable=False)
    rule = Column(String(255), default="")         # "–∫–∞–∂–¥—ã–µ 2 –¥–Ω—è" / "shelf 72h"
    order_deadline = Column(String(10), default="14:00")
    emoji = Column(String(8), default="üì¶")
    delivery_offset_days = Column(Integer, default=1)
    shelf_days = Column(Integer, default=0)
    start_cycle = Column(Date, nullable=True)
    auto = Column(Boolean, default=True)
    active = Column(Boolean, default=True)
    direction_id = Column(Integer, ForeignKey("directions.id", ondelete="SET NULL"), nullable=True)
    direction = relationship("Direction", lazy="joined")
    created_at = Column(DateTime, server_default=func.now())

class Task(Base):
    __tablename__ = "tasks"
    __table_args__ = (
        UniqueConstraint('user_id','date','text','category','subcategory','is_repeating', name='uq_task_day'),
        Index("idx_tasks_user_date_status", "user_id", "date", "status"),
        Index("idx_tasks_user_type", "user_id", "task_type"),
        UniqueConstraint('user_id','date','auto_key', name='uq_tasks_auto_key_date_user'),
    )
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, index=True, nullable=False)
    assignee_id = Column(Integer, nullable=True)  # –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º—É (chat id)
    date = Column(Date, index=True, nullable=False)
    category = Column(String(120), default="–õ–∏—á–Ω–æ–µ", index=True)
    subcategory = Column(String(120), default="", index=True)  # –¢–¢/–ª–æ–∫–∞—Ü–∏—è
    text = Column(Text, nullable=False)
    deadline = Column(Time, nullable=True)
    status = Column(String(40), default="")  # "", "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
    repeat_rule = Column(String(255), default="")
    source = Column(String(255), default="")  # supplier, repeat-instance –∏ —Ç.–ø.
    is_repeating = Column(Boolean, default=False)
    # NEW:
    priority   = Column(String(20), default="medium")   # high|medium|low|future
    task_type  = Column(String(20), default="todo")     # todo|purchase
    direction_id = Column(Integer, ForeignKey("directions.id", ondelete="SET NULL"), nullable=True)
    supplier_id  = Column(Integer, ForeignKey("suppliers.id", ondelete="SET NULL"), nullable=True)
    auto_key  = Column(String(160), nullable=True)
    direction = relationship("Direction", lazy="joined")
    supplier  = relationship("Supplier", lazy="joined")
    created_at = Column(DateTime, server_default=func.now())

class Subtask(Base):
    __tablename__ = "subtasks"
    id = Column(Integer, primary_key=True)
    task_id = Column(Integer, ForeignKey("tasks.id", ondelete="CASCADE"), index=True)
    text = Column(Text, nullable=False)
    status = Column(String(40), default="")

class Dependency(Base):
    __tablename__ = "dependencies"
    id = Column(Integer, primary_key=True)
    task_id = Column(Integer, ForeignKey("tasks.id", ondelete="CASCADE"), index=True)
    depends_on_id = Column(Integer, ForeignKey("tasks.id", ondelete="CASCADE"), index=True)

class Rule(Base):
    __tablename__ = "rules"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, index=True, nullable=False)
    direction_id = Column(Integer, ForeignKey("directions.id", ondelete="SET NULL"))
    type = Column(String(20), nullable=False)  # 'todo'|'purchase'
    supplier_id = Column(Integer, ForeignKey("suppliers.id", ondelete="SET NULL"))
    periodicity = Column(String(20), nullable=False)  # 'daily'|'weekdays'|'every_n_days'
    every_n = Column(Integer, nullable=True)
    weekdays = Column(String(20), nullable=True)      # "–ø–Ω,—Å—Ä,–ø—Ç"
    notify_time = Column(Time, nullable=True)
    notify_before_min = Column(Integer, default=0)
    auto_create = Column(Boolean, default=True)
    title = Column(Text, default="")
    active = Column(Boolean, default=True)
    created_at = Column(DateTime, server_default=func.now())
    __table_args__ = (Index("idx_rules_user_active", "user_id", "active"),)

Base.metadata.create_all(bind=engine)

def migrate_db():
    with engine.begin() as conn:
        conn.exec_driver_sql(
            "ALTER TABLE users  ADD COLUMN IF NOT EXISTS tz VARCHAR(64) NOT NULL DEFAULT 'Europe/Moscow';"
        )
        conn.exec_driver_sql(
            "ALTER TABLE users  ADD COLUMN IF NOT EXISTS digest_08 BOOLEAN NOT NULL DEFAULT true;"
        )
        conn.exec_driver_sql(
            "ALTER TABLE tasks  ADD COLUMN IF NOT EXISTS assignee_id INTEGER;"
        )
        # NEW columns/indexes (idempotent)
        conn.exec_driver_sql(
            "ALTER TABLE suppliers ADD COLUMN IF NOT EXISTS direction_id INT NULL REFERENCES directions(id) ON DELETE SET NULL;"
        )
        conn.exec_driver_sql(
            "ALTER TABLE tasks ADD COLUMN IF NOT EXISTS priority VARCHAR(20) DEFAULT 'medium';"
        )
        conn.exec_driver_sql(
            "ALTER TABLE tasks ADD COLUMN IF NOT EXISTS task_type VARCHAR(20) DEFAULT 'todo';"
        )
        conn.exec_driver_sql(
            "ALTER TABLE tasks ADD COLUMN IF NOT EXISTS direction_id INT NULL REFERENCES directions(id) ON DELETE SET NULL;"
        )
        conn.exec_driver_sql(
            "ALTER TABLE tasks ADD COLUMN IF NOT EXISTS supplier_id INT NULL REFERENCES suppliers(id) ON DELETE SET NULL;"
        )
        conn.exec_driver_sql(
            "ALTER TABLE tasks ADD COLUMN IF NOT EXISTS auto_key VARCHAR(160) NULL;"
        )
        conn.exec_driver_sql(
            "CREATE INDEX IF NOT EXISTS idx_tasks_user_date_status ON tasks(user_id, date, status);"
        )
        conn.exec_driver_sql(
            "CREATE INDEX IF NOT EXISTS idx_tasks_user_type ON tasks(user_id, task_type);"
        )
        conn.exec_driver_sql(
            "CREATE INDEX IF NOT EXISTS idx_rules_user_active ON rules(user_id, active);"
        )
        # —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∞–≤—Ç–æ‚Äë–∫–ª—é—á–∞
        conn.exec_driver_sql("""
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_constraint WHERE conname = 'uq_tasks_auto_key_date_user'
  ) THEN
    ALTER TABLE tasks
    ADD CONSTRAINT uq_tasks_auto_key_date_user UNIQUE (user_id, date, auto_key);
  END IF;
END $$;
""")
migrate_db()

# --------- BOT ---------
bot = TeleBot(API_TOKEN, parse_mode="HTML")
PAGE = 8
from org_ext import OrgExt
org = OrgExt(bot)   # –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–≤–æ–∏ engine/SessionLocal, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
org.init_db()       # —Å–æ–∑–¥–∞—Å—Ç —Ç–∞–±–ª–∏—Ü—ã, —Ç–æ—á–∫–∏, –∏ –∑–∞–ª—å—ë—Ç —à–∞–±–ª–æ–Ω—ã –æ—Ç—á—ë—Ç–æ–≤
org.register()      # –ø–æ–≤–µ—Å–∏—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã: –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è/—Ä–æ–ª–∏, —á–µ–∫-–∏–Ω/–∞—É—Ç, –æ—Ç—á—ë—Ç—ã, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
LAST_TICK: Optional[datetime] = None

# --------- Utils ---------
def now_local():
    return datetime.now(LOCAL_TZ)

def dstr(d: date): return d.strftime("%d.%m.%Y")
def tstr(t: dtime|None): return t.strftime("%H:%M") if t else "‚Äî"
def parse_date(s): return datetime.strptime(s, "%d.%m.%Y").date()
def parse_time(s): return datetime.strptime(s, "%H:%M").time()

def weekday_ru(d: date):
    names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    return names[d.weekday()]

def _cb_sign(s:str)->str:
    return hashlib.sha1(CALLBACK_SECRET + s.encode("utf-8")).hexdigest()[:6]

def mk_cb(action, **kwargs):
    payload = {"v":1, "a": action, **kwargs}
    s = json.dumps(payload, ensure_ascii=False, separators=(",",":"))
    sig = _cb_sign(s)
    return f"{sig}|{s}"

def parse_cb(data):
    try:
        sig, s = data.split("|", 1)
        if _cb_sign(s) != sig:
            return None
        return json.loads(s)
    except Exception:
        return None

def ensure_user(sess, uid, name="", tz=None):
    u = sess.query(User).filter_by(id=uid).first()
    if not u:
        u = User(id=uid, name=name or "", tz=tz or TZ_NAME)
        sess.add(u); sess.commit()
    return u

# –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ (–±—ç–∫–æ—Ñ—Ñ)
def send_safe(text, chat_id, **kwargs):
    delay = 0.5
    for _ in range(6):
        try:
            return bot.send_message(chat_id, text, **kwargs)
        except apihelper.ApiTelegramException as e:
            sc = getattr(e.result, "status_code", None)
            if sc in (429, 500, 502, 503, 504):
                time.sleep(delay); delay *= 2; continue
            time.sleep(delay); delay *= 2
        except Exception:
            time.sleep(delay); delay *= 2
    return bot.send_message(chat_id, text[:4000], **kwargs)

# --------- Suppliers rules / plan (—Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞) ---------
BASE_SUP_RULES = {
    "–∫-—ç–∫—Å–ø—Ä–æ": {"kind":"cycle_every_n_days","n_days":2,"delivery_offset":1,"deadline":"14:00","emoji":"üì¶"},
    "–∏–ø –≤—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞": {"kind":"delivery_shelf_then_order","delivery_offset":1,"shelf_days":3,"deadline":"14:00","emoji":"ü•ò"},
}
def norm_sup(name:str): return (name or "").strip().lower()

def load_rule(sess, supplier_name:str):
    s = sess.query(Supplier).filter(func.lower(Supplier.name)==norm_sup(supplier_name)).first()
    if s and s.active:
        rl = (s.rule or "").lower()
        if "–∫–∞–∂–¥—ã–µ" in rl:
            m = re.findall(r"\d+", rl); n = int(m[0]) if m else 2
            return {"kind":"cycle_every_n_days","n_days":n,"delivery_offset":s.delivery_offset_days or 1,
                    "deadline":s.order_deadline or "14:00","emoji":s.emoji or "üì¶"}
        if any(x in rl for x in ["shelf","72","—Ö—Ä–∞–Ω–µ–Ω"]):
            return {"kind":"delivery_shelf_then_order","delivery_offset":s.delivery_offset_days or 1,
                    "shelf_days":s.shelf_days or 3,"deadline":s.order_deadline or "14:00","emoji":s.emoji or "ü•ò"}
    return BASE_SUP_RULES.get(norm_sup(supplier_name))

def plan_next(sess, user_id:int, supplier:str, category:str, subcategory:str):
    rule = load_rule(sess, supplier)
    if not rule: return []
    today = now_local().date()
    out = []
    if rule["kind"]=="cycle_every_n_days":
        delivery = today + timedelta(days=rule["delivery_offset"])
        next_order = today + timedelta(days=rule["n_days"])
        sess.merge(Task(user_id=user_id, date=delivery, category=category, subcategory=subcategory,
                        text=f"{rule['emoji']} –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier} ({subcategory or '‚Äî'})",
                        deadline=parse_time("10:00"), task_type="purchase", priority="high"))
        sess.merge(Task(user_id=user_id, date=next_order, category=category, subcategory=subcategory,
                        text=f"{rule['emoji']} –ó–∞–∫–∞–∑–∞—Ç—å {supplier} ({subcategory or '‚Äî'})",
                        deadline=parse_time(rule["deadline"]), task_type="purchase", priority="high"))
        sess.commit()
        out = [("delivery", delivery), ("order", next_order)]
    else:
        delivery = today + timedelta(days=rule["delivery_offset"])
        next_order = delivery + timedelta(days=max(1, (rule.get("shelf_days",3)-1)))
        sess.merge(Task(user_id=user_id, date=delivery, category=category, subcategory=subcategory,
                        text=f"{rule['emoji']} –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier} ({subcategory or '‚Äî'})",
                        deadline=parse_time("11:00"), task_type="purchase", priority="high"))
        sess.merge(Task(user_id=user_id, date=next_order, category=category, subcategory=subcategory,
                        text=f"{rule['emoji']} –ó–∞–∫–∞–∑–∞—Ç—å {supplier} ({subcategory or '‚Äî'})",
                        deadline=parse_time(rule["deadline"]), task_type="purchase", priority="high"))
        sess.commit()
        out = [("delivery", delivery), ("order", next_order)]
    return out

# --------- Repeats (—Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞) ---------
def rule_hits_date(rule_text:str, created_at:datetime, target:date, template_deadline: dtime|None) -> dtime|None:
    if not rule_text: return None
    rl = rule_text.strip().lower()
    if rl.startswith("–∫–∞–∂–¥—ã–µ"):
        m = re.findall(r"\d+", rl); n = int(m[0]) if m else 1
        base = created_at.date() if created_at else date(2025,1,1)
        delta = (target - base).days
        return template_deadline if (delta >= 0 and delta % n == 0) else None
    if rl.startswith("–∫–∞–∂–¥—ã–π"):
        days = {"–ø–Ω":0,"–≤—Ç":1,"—Å—Ä":2,"—á—Ç":3,"–ø—Ç":4,"—Å–±":5,"–≤—Å":6,
                "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":0,"–≤—Ç–æ—Ä–Ω–∏–∫":1,"—Å—Ä–µ–¥–∞":2,"—á–µ—Ç–≤–µ—Ä–≥":3,"–ø—è—Ç–Ω–∏—Ü–∞":4,"—Å—É–±–±–æ—Ç–∞":5,"–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":6}
        wd = None
        for k,v in days.items():
            if f" {k}" in f" {rl}": wd=v; break
        if wd is None or target.weekday()!=wd: return None
        tm = re.search(r"(\d{1,2}:\d{2})", rl)
        return parse_time(tm.group(1)) if tm else template_deadline
    if rl.startswith("–ø–æ "):
        m = re.findall(r"(–ø–Ω|–≤—Ç|—Å—Ä|—á—Ç|–ø—Ç|—Å–±|–≤—Å)", rl)
        mapd = {"–ø–Ω":0,"–≤—Ç":1,"—Å—Ä":2,"—á—Ç":3,"–ø—Ç":4,"—Å–±":5,"–≤—Å":6}
        wds = {mapd[x] for x in m} if m else set()
        return template_deadline if target.weekday() in wds else None
    return None

def expand_repeats_for_date(sess, uid:int, target:date):
    templates = sess.query(Task).filter(Task.user_id==uid, Task.is_repeating==True).all()
    for t in templates:
        hit_deadline = rule_hits_date(t.repeat_rule or "", t.created_at, target, t.deadline)
        if not hit_deadline: continue
        exists = (sess.query(Task)
                  .filter(Task.user_id==uid, Task.date==target, Task.is_repeating==False,
                          Task.text==t.text, Task.category==t.category, Task.subcategory==t.subcategory)
                  .first())
        if exists: continue
        sess.add(Task(user_id=uid, date=target, category=t.category, subcategory=t.subcategory,
                      text=t.text, deadline=hit_deadline, status="", repeat_rule="",
                      source="repeat-instance", is_repeating=False))
    sess.commit()

# --------- Formatting / keyboards ---------
def short_line(t: Task, idx=None):
    assignee = f" ‚Üí @{t.assignee_id}" if t.assignee_id and t.assignee_id!=t.user_id else ""
    p = f"{idx}. " if idx is not None else ""
    pr_emoji = {"high":"üî¥","medium":"üü°","low":"üü¢","future":"‚è≥"}.get(t.priority or "medium","üü°")
    return f"{p}{pr_emoji} {t.category}/{t.subcategory or '‚Äî'}: {t.text[:40]}‚Ä¶ (–¥–æ {tstr(t.deadline)}){assignee}"

def format_grouped(tasks, header_date=None):
    if not tasks: return "–ó–∞–¥–∞—á –Ω–µ—Ç."
    out = []
    if header_date:
        out.append(f"‚Ä¢ {weekday_ru(tasks[0].date)} ‚Äî {header_date}\n")
    cur_cat = cur_sub = None
    for t in sorted(tasks, key=lambda x: (x.category or "", x.subcategory or "", x.deadline or dtime.min, x.text)):
        icon = "‚úÖ" if t.status=="–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else "‚¨ú"
        if t.category != cur_cat:
            out.append(f"üìÇ <b>{t.category or '‚Äî'}</b>"); cur_cat = t.category; cur_sub = None
        if t.subcategory != cur_sub:
            out.append(f"  ‚îî <b>{t.subcategory or '‚Äî'}</b>"); cur_sub = t.subcategory
        pr_emoji = {"high":"üî¥","medium":"üü°","low":"üü¢","future":"‚è≥"}.get(t.priority or "medium","üü°")
        line = f"    ‚îî {icon} {pr_emoji} {t.text}"
        if t.deadline: line += f"  <i>(–¥–æ {tstr(t.deadline)})</i>"
        if t.assignee_id and t.assignee_id!=t.user_id: line += f"  [–¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–æ: {t.assignee_id}]"
        out.append(line)
    return "\n".join(out)

def page_kb(items, page, total, action="open"):
    kb = types.InlineKeyboardMarkup()
    for label, tid in items:
        kb.add(types.InlineKeyboardButton(label, callback_data=mk_cb(action, id=tid)))
    nav = []
    if page>1: nav.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=mk_cb("page", p=page-1, pa=action)))
    nav.append(types.InlineKeyboardButton(f"{page}/{total}", callback_data="noop"))
    if page<total: nav.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=mk_cb("page", p=page+1, pa=action)))
    if nav: kb.row(*nav)
    return kb

def tasks_for_date(sess, uid:int, d:date):
    return (sess.query(Task)
            .filter(Task.user_id==uid, Task.date==d, Task.is_repeating==False)
            .order_by(Task.category.asc(), Task.subcategory.asc(), Task.deadline.asc().nulls_last())
            ).all()

def tasks_for_week(sess, uid:int, base:date):
    days = [base + timedelta(days=i) for i in range(7)]
    return (sess.query(Task)
            .filter(Task.user_id==uid, Task.date.in_(days), Task.is_repeating==False)
            .order_by(Task.date.asc(), Task.category.asc(), Task.subcategory.asc(), Task.deadline.asc().nulls_last())
            ).all()

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üìÖ –°–µ–≥–æ–¥–Ω—è","üìÜ –ù–µ–¥–µ–ª—è")
    kb.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å","‚úÖ –Ø —Å–¥–µ–ª–∞–ª‚Ä¶","üß† –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
    kb.row("üöö –ü–æ—Å—Ç–∞–≤–∫–∏","üîé –ù–∞–π—Ç–∏")
    kb.row("‚öôÔ∏è –ü—Ä–∞–≤–∏–ª–∞","üë§ –ü—Ä–æ—Ñ–∏–ª—å","üß© –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏","ü§ù –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
    return kb

# --------- NLP add (—Ç–≤–æ—è –ª–æ–≥–∏–∫–∞) ---------
def ai_parse_items(text, uid):
    if openai_client:
        try:
            sys = ("–¢—ã –ø–∞—Ä—Å–µ—Ä –∑–∞–¥–∞—á. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON-–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤: "
                   "{date:'–î–î.–ú–ú.–ì–ì–ì–ì'|'', time:'–ß–ß:–ú–ú'|'', category, subcategory, task, repeat:'', supplier:''}.")
            resp = openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role":"system","content":sys},{"role":"user","content":text}],
                temperature=0.2
            )
            raw = resp.choices[0].message.content.strip()
            data = json.loads(raw)
            if isinstance(data, dict): data = [data]
            out = []
            for it in data:
                out.append({
                    "date": it.get("date") or "",
                    "time": it.get("time") or "",
                    "category": it.get("category") or "–õ–∏—á–Ω–æ–µ",
                    "subcategory": it.get("subcategory") or "",
                    "task": it.get("task") or "",
                    "repeat": it.get("repeat") or "",
                    "supplier": it.get("supplier") or "",
                    "user_id": uid
                })
            return out
        except Exception as e:
            log.warning("AI parse fail: %s", e)
    tl = text.lower()
    cat = "–ö–æ—Ñ–µ–π–Ω—è" if any(x in tl for x in ["–∫–æ—Ñ–µ–π–Ω","–∫-—ç–∫—Å–ø—Ä–æ","–≤—ã–ª–µ–≥–∂–∞–Ω"]) else ("–¢–∞–±–∞—á–∫–∞" if "—Ç–∞–±–∞—á" in tl else "–õ–∏—á–Ω–æ–µ")
    sub = "–¶–µ–Ω—Ç—Ä" if "—Ü–µ–Ω—Ç—Ä" in tl else ("–ü–æ–ª–µ—Ç" if ("–ø–æ–ª–µ—Ç" in tl or "–ø–æ–ª—ë—Ç" in tl) else ("–ö–ª–∏–º–æ–≤–æ" if "–∫–ª–∏–º–æ–≤" in tl else ""))
    tm = re.search(r"(\d{1,2}:\d{2})", text)
    time_s = tm.group(1) if tm else ""
    if "—Å–µ–≥–æ–¥–Ω—è" in tl: ds = dstr(now_local().date())
    elif "–∑–∞–≤—Ç—Ä–∞" in tl: ds = dstr(now_local().date()+timedelta(days=1))
    else:
        m = re.search(r"(\d{2}\.\d{2}\.\d{4})", text); ds = m.group(1) if m else ""
    supplier = "–ö-–≠–∫—Å–ø—Ä–æ" if ("–∫-—ç–∫—Å–ø—Ä–æ" in tl or "k-exp" in tl or "–∫ —ç–∫—Å–ø—Ä–æ" in tl) else ("–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞" if "–≤—ã–ª–µ–≥–∂–∞–Ω" in tl else "")
    return [{
        "date": ds, "time": time_s, "category": cat, "subcategory": sub,
        "task": text.strip(), "repeat":"", "supplier": supplier, "user_id": uid
    }]

# --------- Handlers ---------
@bot.message_handler(commands=["start"])
def start(m):
    sess = SessionLocal()
    try:
        ensure_user(sess, m.chat.id, m.from_user.full_name if m.from_user else "", tz=TZ_NAME)
        # —Å–∏–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –ø—É—Å—Ç–æ)
        if sess.query(Direction).count() == 0:
            for name,emoji,sort in [("–ö–æ—Ñ–µ–π–Ω—è","‚òï",10),("WB","üì¶",20),("–¢–∞–±–∞—á–∫–∞","üö¨",30),("–õ–∏—á–Ω–æ–µ","üè†",40)]:
                sess.add(Direction(name=name, emoji=emoji, sort_order=sort))
            sess.commit()
    finally:
        sess.close()
    bot.send_message(m.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–¥–∞—á–∞–º.", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üìÖ –°–µ–≥–æ–¥–Ω—è")
def today(m):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        expand_repeats_for_date(sess, uid, now_local().date())
        rows = tasks_for_date(sess, uid, now_local().date())
        if not rows:
            bot.send_message(uid, f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ {dstr(now_local().date())}\n\n–ó–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=main_menu()); return
        items = [(short_line(t, i), t.id) for i,t in enumerate(rows, start=1)]
        total = (len(items)+PAGE-1)//PAGE or 1
        kb = page_kb(items[:PAGE], 1, total, "open")
        header = f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ {dstr(now_local().date())}\n\n" + format_grouped(rows, header_date=dstr(now_local().date())) + "\n\n–û—Ç–∫—Ä–æ–π –∫–∞—Ä—Ç–æ—á–∫—É:"
        bot.send_message(uid, header, reply_markup=main_menu())
        bot.send_message(uid, "–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∑–∞–¥–∞—á–∞–º:", reply_markup=kb)
    finally:
        sess.close()

@bot.message_handler(func=lambda msg: msg.text == "üìÜ –ù–µ–¥–µ–ª—è")
def week(m):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        base = now_local().date()
        for i in range(7):
            expand_repeats_for_date(sess, uid, base+timedelta(days=i))
        rows = tasks_for_week(sess, uid, base)
        if not rows:
            bot.send_message(uid, "–ù–∞ –Ω–µ–¥–µ–ª—é –∑–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=main_menu()); return
        by = {}
        for t in rows: by.setdefault(dstr(t.date), []).append(t)
        parts = []
        for ds in sorted(by.keys(), key=lambda s: parse_date(s)):
            parts.append(format_grouped(by[ds], header_date=ds)); parts.append("")
        bot.send_message(uid, "\n".join(parts), reply_markup=main_menu())
    finally:
        sess.close()

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def add(m):
    sent = bot.send_message(m.chat.id, "–û–ø–∏—à–∏ –∑–∞–¥–∞—á—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–¥–∞—Ç—É/–≤—Ä–µ–º—è/–∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å–ø–æ–∑–Ω–∞—é).")
    bot.register_next_step_handler(sent, add_text)

def add_text(m):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        items = ai_parse_items(m.text.strip(), uid)
        created = 0; templates = 0
        for it in items:
            dt = parse_date(it["date"]) if it["date"] else now_local().date()
            tm = parse_time(it["time"]) if it["time"] else None
            is_rep = bool((it.get("repeat") or "").strip())
            # NEW: –¥–µ—Ñ–æ–ª—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
            t = Task(user_id=uid, date=dt, category=it["category"], subcategory=it["subcategory"],
                     text=it["task"], deadline=tm, repeat_rule=it["repeat"], source=it["supplier"],
                     is_repeating=is_rep, task_type=("purchase" if it.get("supplier") else "todo"),
                     priority=("high" if it.get("supplier") else "medium"))
            sess.add(t)
            if is_rep: templates += 1
            else: created += 1
        sess.commit()
        msg = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {created}."
        if templates: msg += f" –°–æ–∑–¥–∞–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {templates}."
        bot.send_message(uid, msg, reply_markup=main_menu())
    finally:
        sess.close()

@bot.message_handler(func=lambda msg: msg.text == "‚úÖ –Ø —Å–¥–µ–ª–∞–ª‚Ä¶")
def done_free(m):
    sent = bot.send_message(m.chat.id, "–ù–∞–ø–∏—à–∏ —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–¥–µ–ª–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å–¥–µ–ª–∞–ª –∑–∞–∫–∞–∑—ã –∫-—ç–∫—Å–ø—Ä–æ —Ü–µ–Ω—Ç—Ä).")
    bot.register_next_step_handler(sent, done_text)

def done_text(m):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        txt = (m.text or "").lower()
        supplier = ""
        if any(x in txt for x in ["–∫-—ç–∫—Å–ø—Ä–æ","k-exp","–∫ —ç–∫—Å–ø—Ä–æ"]): supplier = "–ö-–≠–∫—Å–ø—Ä–æ"
        if "–≤—ã–ª–µ–≥–∂–∞–Ω" in txt: supplier = "–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞"
        rows = tasks_for_date(sess, uid, now_local().date())
        changed = 0; last = None
        for t in rows:
            if t.status=="–≤—ã–ø–æ–ª–Ω–µ–Ω–æ": continue
            low = (t.text or "").lower()
            is_order = ("–∑–∞–∫–∞–∑" in low or "–∑–∞–∫—É–ø" in low)
            if supplier:
                if norm_sup(supplier) not in norm_sup(low): continue
                if not is_order: continue
            elif not any(w in low for w in ["–∑–∞–∫–∞–∑","–∑–∞–∫—É–ø","—Å–¥–µ–ª–∞–ª"]):
                continue
            t.status = "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"; last = t; changed += 1
        sess.commit()
        msg = f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º: {changed}."
        if changed and supplier and last:
            created = plan_next(sess, uid, supplier, last.category, last.subcategory)
            if created: msg += " –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏–µ–º–∫–∞/—Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑."
        bot.send_message(uid, msg, reply_markup=main_menu())
    finally:
        sess.close()

# ----- –ü–æ—Å—Ç–∞–≤–∫–∏ -----
@bot.message_handler(func=lambda msg: msg.text == "üöö –ü–æ—Å—Ç–∞–≤–∫–∏")
def supplies_menu(m):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üì¶ –ó–∞–∫–∞–∑—ã —Å–µ–≥–æ–¥–Ω—è","üÜï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
    kb.row("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(m.chat.id, "–ú–µ–Ω—é –ø–æ—Å—Ç–∞–≤–æ–∫:", reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def back_main(m):
    bot.send_message(m.chat.id, "–û–∫.", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üì¶ –ó–∞–∫–∞–∑—ã —Å–µ–≥–æ–¥–Ω—è")
def orders_today(m):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        rows = tasks_for_date(sess, uid, now_local().date())
        orders = [t for t in rows if "–∑–∞–∫–∞–∑" in (t.text or "").lower()]
        if not orders:
            bot.send_message(uid, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.", reply_markup=main_menu()); return
        items = [(short_line(t, i), t.id) for i,t in enumerate(orders, start=1)]
        total = (len(items)+PAGE-1)//PAGE or 1
        kb = page_kb(items[:PAGE], 1, total, "open")
        bot.send_message(uid, "–ó–∞–∫–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:", reply_markup=kb)
    finally:
        sess.close()

@bot.message_handler(func=lambda msg: msg.text == "üÜï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
def add_supplier(m):
    text = ("–§–æ—Ä–º–∞—Ç:\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ; –ø—Ä–∞–≤–∏–ª–æ; –¥–µ–¥–ª–∞–π–Ω; emoji; delivery_offset; shelf_days; auto(1/0); active(1/0)\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "–ö-–≠–∫—Å–ø—Ä–æ; –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è; 14:00; üì¶; 1; 0; 1; 1\n"
            "–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞; shelf 72h; 14:00; ü•ò; 1; 3; 1; 1")
    sent = bot.send_message(m.chat.id, text)
    bot.register_next_step_handler(sent, add_supplier_parse)

def add_supplier_parse(m):
    sess = SessionLocal()
    try:
        parts = [p.strip() for p in (m.text or "").split(";")]
        if len(parts) < 8:
            bot.send_message(m.chat.id, "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ù—É–∂–Ω—ã 8 –ø–æ–ª–µ–π.", reply_markup=main_menu()); return
        name, rule, deadline, emoji, offs, shelf, auto, active = parts[:8]
        s = sess.query(Supplier).filter(func.lower(Supplier.name)==name.strip().lower()).first() or Supplier(name=name.strip())
        s.rule = rule; s.order_deadline = deadline; s.emoji = emoji
        s.delivery_offset_days = int(offs or 1); s.shelf_days = int(shelf or 0)
        s.auto = bool(int(auto)); s.active = bool(int(active))
        sess.add(s); sess.commit()
        bot.send_message(m.chat.id, "‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=main_menu())
    finally:
        sess.close()

# ----- –ü–æ–∏—Å–∫ / –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç -----
@bot.message_handler(func=lambda msg: msg.text == "üîé –ù–∞–π—Ç–∏")
def search_prompt(m):
    sent = bot.send_message(m.chat.id, "–ß—Ç–æ –∏—â–µ–º? (—Ç–µ–∫—Å—Ç, –∫–∞—Ç–µ–≥–æ—Ä–∏—è/–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ –¥–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì)")
    bot.register_next_step_handler(sent, do_search)

def do_search(m):
    sess = SessionLocal()
    try:
        uid = m.chat.id; q = (m.text or "").strip()
        ds = re.search(r"(\d{2}\.\d{2}\.\d{4})", q)
        conds = [Task.user_id==uid, Task.is_repeating==False]
        if ds: conds.append(Task.date==parse_date(ds.group(1)))
        if "/" in q:
            cat, sub = [x.strip() for x in q.split("/",1)]
            conds.extend([Task.category.ilike(f"%{cat}%"), Task.subcategory.ilike(f"%{sub}%")])
        elif q:
            conds.append(or_(Task.text.ilike(f"%{q}%"),
                             Task.category.ilike(f"%{q}%"),
                             Task.subcategory.ilike(f"%{q}%")))
        rows = (sess.query(Task).filter(and_(*conds))
                .order_by(Task.date.asc(), Task.category.asc(), Task.subcategory.asc()).all())
        if not rows:
            bot.send_message(uid, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu()); return
        by = {}
        for t in rows: by.setdefault(dstr(t.date), []).append(t)
        parts = []
        for ds in sorted(by.keys(), key=lambda s: parse_date(s)):
            parts.append(format_grouped(by[ds], header_date=ds)); parts.append("")
        bot.send_message(uid, "\n".join(parts), reply_markup=main_menu())
    finally:
        sess.close()

@bot.message_handler(func=lambda msg: msg.text == "üß† –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
def assistant(m):
    sent = bot.send_message(m.chat.id, "–°–ø—Ä–æ—Å–∏ –º–µ–Ω—è –æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ/–ø–ª–∞–Ω–µ. –Ø —É—á—Ç—É —Ç–≤–æ—é –Ω–µ–¥–µ–ª—é.", reply_markup=main_menu())
    bot.register_next_step_handler(sent, assistant_answer)

def assistant_answer(m):
    uid = m.chat.id
    sess = SessionLocal()
    try:
        base = now_local().date()
        rows = tasks_for_week(sess, uid, base)
        context_lines = []
        for t in rows[:200]:
            context_lines.append(f"{dstr(t.date)} | {t.category}/{t.subcategory or '‚Äî'} | {t.text} | –¥–æ {tstr(t.deadline)} | {t.status or '‚Äî'}")
        question = m.text or ""
        if openai_client:
            try:
                system = ("–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç‚Äë–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫. –ö—Ä–∞—Ç–∫–æ (–º–∞—Ä–∫–µ—Ä–∞–º–∏) –¥–∞–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã, —Å—Ä–æ–∫–∏, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ –¥–µ–¥–ª–∞–π–Ω–∞–º. –†—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º.")
                user = "–ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á –Ω–∞ –Ω–µ–¥–µ–ª—é:\n" + "\n".join(context_lines) + "\n\n–í–æ–ø—Ä–æ—Å:\n" + question
                resp = openai_client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=[{"role":"system","content":system},{"role":"user","content":user}],
                    temperature=0.2
                )
                bot.send_message(uid, resp.choices[0].message.content.strip(), reply_markup=main_menu())
                return
            except Exception as e:
                log.warning("assistant fail: %s", e)
        bot.send_message(uid, "‚Ä¢ –ù–∞—á–Ω–∏ —Å –∑–∞–¥–∞—á —Å –≤—Ä–µ–º–µ–Ω–µ–º –¥–æ 12:00.\n‚Ä¢ –î–∞–ª–µ–µ ‚Äî ¬´–ó–∞–∫–∞–∑—ã¬ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ (–¥–æ –¥–µ–¥–ª–∞–π–Ω–æ–≤).\n‚Ä¢ –ü–æ—Ç–æ–º –ª–∏—á–Ω—ã–µ –±–µ–∑ —Å—Ä–æ–∫–∞.", reply_markup=main_menu())
    finally:
        sess.close()

# ----- –ü—Ä–æ—Ñ–∏–ª—å / –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ / –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ -----
@bot.message_handler(func=lambda msg: msg.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
def profile(m):
    sess = SessionLocal()
    try:
        u = ensure_user(sess, m.chat.id)
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.row("üïí TZ", "üì® –î–∞–π–¥–∂–µ—Å—Ç 08:00")
        kb.row("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        bot.send_message(m.chat.id, f"–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n‚Ä¢ TZ: {u.tz}\n‚Ä¢ –î–∞–π–¥–∂–µ—Å—Ç 08:00: {'–≤–∫–ª' if u.digest_08 else '–≤—ã–∫–ª'}", reply_markup=kb)
    finally:
        sess.close()

@bot.message_handler(func=lambda msg: msg.text == "üïí TZ")
def profile_tz(m):
    sent = bot.send_message(m.chat.id, "–í–≤–µ–¥–∏ IANA TZ, –Ω–∞–ø—Ä. Europe/Moscow")
    bot.register_next_step_handler(sent, profile_tz_set)

def profile_tz_set(m):
    sess = SessionLocal()
    try:
        tz = (m.text or "").strip()
        try:
            pytz.timezone(tz)
        except Exception:
            bot.send_message(m.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è TZ. –ü—Ä–∏–º–µ—Ä: Europe/Moscow", reply_markup=main_menu()); return
        u = ensure_user(sess, m.chat.id)
        u.tz = tz; sess.commit()
        bot.send_message(m.chat.id, f"‚úÖ TZ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {tz}", reply_markup=main_menu())
    finally:
        sess.close()

@bot.message_handler(func=lambda msg: msg.text == "üì® –î–∞–π–¥–∂–µ—Å—Ç 08:00")
def profile_digest_toggle(m):
    sess = SessionLocal()
    try:
        u = ensure_user(sess, m.chat.id)
        u.digest_08 = not (u.digest_08 or False)
        sess.commit()
        bot.send_message(m.chat.id, f"–î–∞–π–¥–∂–µ—Å—Ç —Ç–µ–ø–µ—Ä—å: {'–≤–∫–ª' if u.digest_08 else '–≤—ã–∫–ª'}", reply_markup=main_menu())
    finally:
        sess.close()

@bot.message_handler(func=lambda msg: msg.text == "ü§ù –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
def delegation_menu(m):
    text = ("–û—Ç–ø—Ä–∞–≤—å ID —á–∞—Ç–∞ (—Ç–µ–ª–µ–≥—Ä–∞–º ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è) –∏ ID –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
            "–ü—Ä–∏–º–µ—Ä: 123456789 42")
    sent = bot.send_message(m.chat.id, text)
    bot.register_next_step_handler(sent, delegation_set)

def delegation_set(m):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        parts = (m.text or "").strip().split()
        if len(parts)!=2 or not parts[0].isdigit() or not parts[1].isdigit():
            bot.send_message(uid, "–§–æ—Ä–º–∞—Ç: <assignee_chat_id> <task_id>", reply_markup=main_menu()); return
        assignee = int(parts[0]); tid = int(parts[1])
        t = sess.query(Task).filter(Task.id==tid, Task.user_id==uid).first()
        if not t:
            bot.send_message(uid, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu()); return
        t.assignee_id = assignee; sess.commit()
        bot.send_message(uid, f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∞ {assignee}.", reply_markup=main_menu())
        try:
            bot.send_message(assignee, f"–í–∞–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –æ—Ç {uid}: ¬´{t.text}¬ª –Ω–∞ {dstr(t.date)} (–¥–æ {tstr(t.deadline)})")
        except Exception: pass
    finally:
        sess.close()

@bot.message_handler(func=lambda msg: msg.text == "üß© –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
def deps_menu(m):
    text = ("–°–æ–∑–¥–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: ¬´child_id parent_id¬ª (child –∂–¥—ë—Ç parent).\n"
            "–ü—Ä–∏–º–µ—Ä: 50 42 ‚Äî –∑–∞–¥–∞—á–∞ 50 –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 42.")
    sent = bot.send_message(m.chat.id, text)
    bot.register_next_step_handler(sent, deps_set)

def deps_set(m):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        parts = (m.text or "").strip().split()
        if len(parts)!=2 or not all(p.isdigit() for p in parts):
            bot.send_message(uid, "–§–æ—Ä–º–∞—Ç: <child_task_id> <parent_task_id>", reply_markup=main_menu()); return
        child, parent = map(int, parts)
        ct = sess.query(Task).filter(Task.id==child, Task.user_id==uid).first()
        pt = sess.query(Task).filter(Task.id==parent, Task.user_id==uid).first()
        if not ct or not pt:
            bot.send_message(uid, "–ó–∞–¥–∞—á–∞(–∏) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=main_menu()); return
        sess.add(Dependency(task_id=child, depends_on_id=parent)); sess.commit()
        bot.send_message(uid, "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=main_menu())
    finally:
        sess.close()

# ----- Callbacks (–∫–∞—Ä—Ç–æ—á–∫–∏) -----
@bot.callback_query_handler(func=lambda c: True)
def cb(c):
    data = parse_cb(c.data) if c.data and c.data!="noop" else None
    uid = c.message.chat.id
    if not data:
        bot.answer_callback_query(c.id); return
    a = data.get("a")
    sess = SessionLocal()
    try:
        if a=="open":
            tid = int(data.get("id"))
            t = sess.query(Task).filter(Task.id==tid, Task.user_id==uid).first()
            if not t: bot.answer_callback_query(c.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True); return
            dl = tstr(t.deadline)
            deps = sess.query(Dependency).filter(Dependency.task_id==t.id).all()
            dep_text = ""
            if deps:
                dep_ids = [str(d.depends_on_id) for d in deps]
                dep_text = f"\nüîó –ó–∞–≤–∏—Å–∏—Ç –æ—Ç: {', '.join(dep_ids)}"
            pr_emoji = {"high":"üî¥","medium":"üü°","low":"üü¢","future":"‚è≥"}.get(t.priority or "medium","üü°")
            text = (f"<b>{t.text}</b>\n"
                    f"üìÖ {weekday_ru(t.date)} ‚Äî {dstr(t.date)}\n"
                    f"üìÅ {t.category}/{t.subcategory or '‚Äî'}\n"
                    f"‚öë –¢–∏–ø: {t.task_type or 'todo'}  ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {pr_emoji}\n"
                    f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {dl}\n"
                    f"üìù –°—Ç–∞—Ç—É—Å: {t.status or '‚Äî'}{dep_text}")
            kb = types.InlineKeyboardMarkup()
            kb.row(types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=mk_cb("done", id=tid)),
                   types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=mk_cb("del", id=tid)))
            kb.row(types.InlineKeyboardButton("‚úèÔ∏è –î–µ–¥–ª–∞–π–Ω", callback_data=mk_cb("setdl", id=tid)),
                   types.InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data=mk_cb("rem", id=tid)))
            # –±—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–Ω–æ—Å (–º–∏–Ω–∏–º—É–º)
            kb.row(types.InlineKeyboardButton("üì§ –°–µ–≥–æ–¥–Ω—è", callback_data=mk_cb("mv", id=tid, to="today")),
                   types.InlineKeyboardButton("üì§ –ó–∞–≤—Ç—Ä–∞",  callback_data=mk_cb("mv", id=tid, to="tomorrow")),
                   types.InlineKeyboardButton("üì§ +1–¥",     callback_data=mk_cb("mv", id=tid, to="+1")))
            bot.answer_callback_query(c.id)
            bot.send_message(uid, text, reply_markup=kb)
            return
        if a=="mv":
            tid = int(data.get("id")); to = data.get("to")
            t = sess.query(Task).filter(Task.id==tid, Task.user_id==uid).first()
            if not t: bot.answer_callback_query(c.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True); return
            base = now_local().date()
            if to=="today": t.date = base
            elif to=="tomorrow": t.date = base + timedelta(days=1)
            elif to=="+1": t.date = t.date + timedelta(days=1)
            sess.commit()
            bot.answer_callback_query(c.id, "–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ"); return
        if a=="page":
            rows = tasks_for_date(sess, uid, now_local().date())
            items = [(short_line(t, i), t.id) for i,t in enumerate(rows, start=1)]
            page = int(data.get("p",1))
            total = (len(items)+PAGE-1)//PAGE or 1
            page = max(1, min(page, total))
            slice_items = items[(page-1)*PAGE:page*PAGE]
            kb = page_kb(slice_items, page, total, "open")
            try:
                bot.edit_message_reply_markup(uid, c.message.message_id, reply_markup=kb)
            except Exception:
                pass
            bot.answer_callback_query(c.id); return
        if a=="done":
            tid = int(data.get("id"))
            t = sess.query(Task).filter(Task.id==tid, Task.user_id==uid).first()
            if not t: bot.answer_callback_query(c.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True); return
            deps = sess.query(Dependency).filter(Dependency.task_id==t.id).all()
            if deps:
                undone = sess.query(Task).filter(Task.id.in_([d.depends_on_id for d in deps]),
                                                 Task.status!="–≤—ã–ø–æ–ª–Ω–µ–Ω–æ").count()
                if undone>0:
                    bot.answer_callback_query(c.id, "–ï—Å—Ç—å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.", show_alert=True); return
            t.status = "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"; sess.commit()
            sup = ""
            low = (t.text or "").lower()
            if any(x in low for x in ["–∫-—ç–∫—Å–ø—Ä–æ","k-exp","–∫ —ç–∫—Å–ø—Ä–æ"]): sup="–ö-–≠–∫—Å–ø—Ä–æ"
            if "–≤—ã–ª–µ–≥–∂–∞–Ω" in low: sup="–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞"
            msg = "‚úÖ –ì–æ—Ç–æ–≤–æ."
            if sup:
                created = plan_next(sess, uid, sup, t.category, t.subcategory)
                if created: msg += " –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏–µ–º–∫–∞/—Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑."
            bot.answer_callback_query(c.id, msg, show_alert=True); return
        if a=="del":
            tid = int(data.get("id"))
            t = sess.query(Task).filter(Task.id==tid, Task.user_id==uid).first()
            if not t: bot.answer_callback_query(c.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True); return
            sess.delete(t); sess.commit()
            bot.answer_callback_query(c.id, "–£–¥–∞–ª–µ–Ω–æ", show_alert=True); return
        if a=="setdl":
            tid = int(data.get("id"))
            bot.answer_callback_query(c.id)
            sent = bot.send_message(uid, "–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
            bot.register_next_step_handler(sent, set_deadline_text, tid)
            return
        if a=="rem":
            tid = int(data.get("id"))
            bot.answer_callback_query(c.id)
            sent = bot.send_message(uid, "–í–≤–µ–¥–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
            bot.register_next_step_handler(sent, add_reminder_text, tid)
            return
        if a=="sub":
            tid = int(data.get("id"))
            bot.answer_callback_query(c.id)
            sent = bot.send_message(uid, "–¢–µ–∫—Å—Ç –ø–æ–¥–∑–∞–¥–∞—á–∏:")
            bot.register_next_step_handler(sent, add_subtask_text, tid)
            return
        if a=="dlg":
            tid = int(data.get("id"))
            bot.answer_callback_query(c.id)
            sent = bot.send_message(uid, "–ö–æ–º—É –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å? –í–≤–µ–¥–∏ chat_id –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
            bot.register_next_step_handler(sent, delegate_to_user, tid)
            return
    finally:
        sess.close()

def set_deadline_text(m, tid):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        try:
            tm = parse_time(m.text.strip())
        except Exception:
            bot.send_message(uid, "–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: –ß–ß:–ú–ú", reply_markup=main_menu()); return
        t = sess.query(Task).filter(Task.id==tid, Task.user_id==uid).first()
        if not t: bot.send_message(uid, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu()); return
        t.deadline = tm; sess.commit()
        bot.send_message(uid, "‚è∞ –î–µ–¥–ª–∞–π–Ω –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=main_menu())
    finally:
        sess.close()

def add_reminder_text(m, tid):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        try:
            parts = m.text.strip().split()
            dt = parse_date(parts[0]); tm = parse_time(parts[1])
        except Exception:
            bot.send_message(uid, "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú", reply_markup=main_menu()); return
        t = sess.query(Task).filter(Task.id==tid, Task.user_id==uid).first()
        if not t: bot.send_message(uid, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu()); return
        sess.add(Reminder(user_id=uid, task_id=tid, date=dt, time=tm, fired=False))
        sess.commit()
        bot.send_message(uid, "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ.", reply_markup=main_menu())
    finally:
        sess.close()

def add_subtask_text(m, tid):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        t = sess.query(Task).filter(Task.id==tid, Task.user_id==uid).first()
        if not t: bot.send_message(uid, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu()); return
        sess.add(Subtask(task_id=tid, text=(m.text or "").strip(), status=""))
        sess.commit()
        bot.send_message(uid, "‚ûï –ü–æ–¥–∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=main_menu())
    finally:
        sess.close()

def delegate_to_user(m, tid):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        try:
            assignee = int((m.text or "").strip())
        except Exception:
            bot.send_message(uid, "–ù—É–∂–µ–Ω —á–∏—Å–ª–æ–≤–æ–π chat_id.", reply_markup=main_menu()); return
        t = sess.query(Task).filter(Task.id==tid, Task.user_id==uid).first()
        if not t: bot.send_message(uid, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu()); return
        t.assignee_id = assignee; sess.commit()
        bot.send_message(uid, f"‚úÖ –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–æ: {assignee}", reply_markup=main_menu())
        try:
            bot.send_message(assignee, f"–í–∞–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –æ—Ç {uid}: ¬´{t.text}¬ª –Ω–∞ {dstr(t.date)} (–¥–æ {tstr(t.deadline)})")
        except Exception: pass
    finally:
        sess.close()
# ===== Rules UI (—Å–ø–∏—Å–æ–∫/–¥–æ–±–∞–≤–∏—Ç—å/—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ) =====
RULE_WIZ = {}      # uid -> {"step":..., "data":{...}}
RULE_EDIT = {}     # uid -> {"field":..., "rule_id":...}

def rule_brief(r: Rule) -> str:
    per = {"daily":"–µ–∂–µ–¥–Ω–µ–≤–Ω–æ","weekdays":f"–ø–æ {r.weekdays or '‚Äî'}","every_n_days":f"–∫–∞–∂–¥—ã–µ {r.every_n or '?'} –¥–Ω."}.get(r.periodicity, r.periodicity)
    auto = "on" if r.auto_create else "off"
    act  = "‚úÖ" if r.active else "‚õî"
    tpe  = "üìå" if r.type=="todo" else "üì¶"
    dirn = "-"
    if r.direction and r.direction.name:
        dirn = f"{r.direction.emoji or 'üìÇ'} {r.direction.name}"
    sup  = "-"
    if r.supplier:
        sup = r.supplier.name
    nt   = tstr(r.notify_time) if r.notify_time else "‚Äî"
    nb   = r.notify_before_min or 0
    ttl  = (r.title or "").strip() or "(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)"
    return (f"{act} {tpe} <b>{ttl}</b>\n"
            f"‚Ä¢ –ù–∞–ø—Ä.: {dirn}\n"
            f"‚Ä¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {sup}\n"
            f"‚Ä¢ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {per}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {nt}  ‚Ä¢ –†–∞–Ω–Ω–∏–π –ø–∏–Ω–≥: {nb} –º–∏–Ω\n"
            f"‚Ä¢ –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ: {auto}")

def rules_list_kb(rules, page=1, per_page=6):
    total_pages = max(1, (len(rules)+per_page-1)//per_page)
    page = max(1, min(page, total_pages))
    start, end = (page-1)*per_page, min(len(rules), page*per_page)
    kb = types.InlineKeyboardMarkup()
    for r in rules[start:end]:
        row1 = [
            types.InlineKeyboardButton("‚úèÔ∏è", callback_data=mk_cb("r_edit", id=r.id)),
            types.InlineKeyboardButton("üîî", callback_data=mk_cb("r_time", id=r.id)),
            types.InlineKeyboardButton("üîÑ", callback_data=mk_cb("r_auto", id=r.id)),
            types.InlineKeyboardButton("‚èØ", callback_data=mk_cb("r_active", id=r.id)),
            types.InlineKeyboardButton("üóë", callback_data=mk_cb("r_del", id=r.id)),
        ]
        kb.row(*row1)
        kb.row(types.InlineKeyboardButton(f"‚ÑπÔ∏è #{r.id}", callback_data=mk_cb("r_info", id=r.id)))
    nav = []
    if page>1:
        nav.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=mk_cb("r_page", p=page-1)))
    nav.append(types.InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
    if page<total_pages:
        nav.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=mk_cb("r_page", p=page+1)))
    if nav: kb.row(*nav)
    kb.row(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ", callback_data=mk_cb("r_add")))
    return kb, page, total_pages

@bot.message_handler(func=lambda msg: msg.text == "‚öôÔ∏è –ü—Ä–∞–≤–∏–ª–∞")
def rules_menu(m):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        rules = (sess.query(Rule)
                 .filter(Rule.user_id==uid)
                 .order_by(Rule.active.desc(), Rule.id.desc())
                 .all())
        if not rules:
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ", callback_data=mk_cb("r_add")))
            bot.send_message(uid, "–ü—Ä–∞–≤–∏–ª –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=main_menu())
            bot.send_message(uid, "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ:", reply_markup=kb)
            return
        text = "‚öôÔ∏è –¢–≤–æ–∏ –ø—Ä–∞–≤–∏–ª–∞:"
        kb, page, total = rules_list_kb(rules, 1)
        bot.send_message(uid, text, reply_markup=main_menu())
        # –æ—Ç–ø—Ä–∞–≤–∏–º –∫—Ä–∞—Ç–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–∞—á–∫–æ–π
        for r in rules[:6]:
            bot.send_message(uid, rule_brief(r), reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –¥–µ–π—Å—Ç–≤–∏—è", callback_data=mk_cb("r_info", id=r.id))
            ))
        bot.send_message(uid, "–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º:", reply_markup=kb)
    finally:
        sess.close()

# ---- Wizard "add rule" ----
def r_wiz_reset(uid): RULE_WIZ.pop(uid, None)
def r_wiz(uid): return RULE_WIZ.setdefault(uid, {"step":"dir","data":{}})

def ask_direction(chat_id):
    sess = SessionLocal()
    try:
        dirs = sess.query(Direction).order_by(Direction.sort_order.asc()).all()
    finally:
        sess.close()
    kb = types.InlineKeyboardMarkup(row_width=2)
    for d in dirs:
        kb.add(types.InlineKeyboardButton(f"{d.emoji or 'üìÇ'} {d.name}", callback_data=mk_cb("r_dir", id=d.id)))
    kb.add(types.InlineKeyboardButton("‚Äî –ë–µ–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚Äî", callback_data=mk_cb("r_dir", id=0)))
    kb.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=mk_cb("r_cancel")))
    send_safe("–®–∞–≥ 1/8: –í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", chat_id, reply_markup=kb)

def ask_type(chat_id):
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("üìå –û–±—ã—á–Ω–æ–µ –¥–µ–ª–æ", callback_data=mk_cb("r_type", v="todo")),
        types.InlineKeyboardButton("üì¶ –ó–∞–∫—É–ø–∫–∞", callback_data=mk_cb("r_type", v="purchase")),
    )
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=mk_cb("r_back")))
    send_safe("–®–∞–≥ 2/8: –í—ã–±–µ—Ä–∏ —Ç–∏–ø", chat_id, reply_markup=kb)

def ask_supplier(chat_id, direction_id):
    sess = SessionLocal()
    try:
        q = sess.query(Supplier)
        if direction_id:
            q = q.filter(Supplier.direction_id==direction_id)
        sups = q.order_by(Supplier.name.asc()).limit(50).all()
    finally:
        sess.close()
    kb = types.InlineKeyboardMarkup(row_width=2)
    for s in sups:
        kb.add(types.InlineKeyboardButton(s.name, callback_data=mk_cb("r_sup", id=s.id)))
    kb.add(types.InlineKeyboardButton("‚Äî –ë–µ–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ ‚Äî", callback_data=mk_cb("r_sup", id=0)))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=mk_cb("r_back")))
    send_safe("–®–∞–≥ 3/8: –í—ã–±–µ—Ä–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", chat_id, reply_markup=kb)

def ask_periodicity(chat_id):
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data=mk_cb("r_per", v="daily")),
        types.InlineKeyboardButton("–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏", callback_data=mk_cb("r_per", v="weekdays")),
        types.InlineKeyboardButton("–ö–∞–∂–¥—ã–µ N –¥–Ω–µ–π", callback_data=mk_cb("r_per", v="every_n_days")),
    )
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=mk_cb("r_back")))
    send_safe("–®–∞–≥ 4/8: –í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å", chat_id, reply_markup=kb)

def ask_weekdays(chat_id, preselected:str=""):
    days = [("–ø–Ω","–ü–Ω"),("–≤—Ç","–í—Ç"),("—Å—Ä","–°—Ä"),("—á—Ç","–ß—Ç"),("–ø—Ç","–ü—Ç"),("—Å–±","–°–±"),("–≤—Å","–í—Å")]
    sel = {x.strip() for x in (preselected or "").split(",") if x.strip()}
    kb = types.InlineKeyboardMarkup(row_width=4)
    for code, label in days:
        mark = "‚úÖ" if code in sel else "‚¨ú"
        kb.add(types.InlineKeyboardButton(f"{mark} {label}", callback_data=mk_cb("r_wd", d=code)))
    kb.add(types.InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data=mk_cb("r_wd_done")))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=mk_cb("r_back")))
    send_safe("–û—Ç–º–µ—Ç—å –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ (–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏):", chat_id, reply_markup=kb)

def ask_every_n(chat_id):
    send_safe("–í–≤–µ–¥–∏ N (—á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ–≤—Ç–æ—Ä—è—Ç—å), –Ω–∞–ø—Ä–∏–º–µ—Ä: 2", chat_id)

def ask_notify_time(chat_id):
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("–ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏", callback_data=mk_cb("r_time_set", v="none")),
        types.InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è", callback_data=mk_cb("r_time_set", v="ask")),
    )
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=mk_cb("r_back")))
    send_safe("–®–∞–≥ 5/8: –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", chat_id, reply_markup=kb)

def ask_before(chat_id):
    kb = types.InlineKeyboardMarkup(row_width=5)
    for m in [0,5,10,30,60]:
        kb.add(types.InlineKeyboardButton(f"{m} –º–∏–Ω", callback_data=mk_cb("r_before", v=m)))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=mk_cb("r_back")))
    send_safe("–®–∞–≥ 6/8: –†–∞–Ω–Ω–∏–π –ø–∏–Ω–≥ (–∑–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)", chat_id, reply_markup=kb)

def ask_auto(chat_id):
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("–ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ: ON", callback_data=mk_cb("r_auto_set", v=1)),
        types.InlineKeyboardButton("–ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ: OFF", callback_data=mk_cb("r_auto_set", v=0)),
    )
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=mk_cb("r_back")))
    send_safe("–®–∞–≥ 7/8: –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á", chat_id, reply_markup=kb)

def ask_title(chat_id):
    send_safe("–®–∞–≥ 8/8: –í–≤–µ–¥–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (—Ç–µ–∫—Å—Ç) –ø—Ä–∞–≤–∏–ª–∞", chat_id)

def r_wiz_summary(data:dict)->str:
    per = data.get("periodicity")
    if per=="weekdays":
        per_h = f"–ø–æ {data.get('weekdays') or '‚Äî'}"
    elif per=="every_n_days":
        per_h = f"–∫–∞–∂–¥—ã–µ {data.get('every_n') or '?'} –¥–Ω."
    else:
        per_h = "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
    tpe  = "üìå" if data.get("type")=="todo" else "üì¶"
    nt   = tstr(data.get("notify_time")) if isinstance(data.get("notify_time"), dtime) else "‚Äî"
    nb   = data.get("notify_before_min", 0)
    auto = "on" if data.get("auto_create") else "off"
    ttl  = (data.get("title") or "").strip() or "(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)"
    return (f"{tpe} <b>{ttl}</b>\n"
            f"‚Ä¢ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {per_h}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {nt}  ‚Ä¢ –†–∞–Ω–Ω–∏–π –ø–∏–Ω–≥: {nb} –º–∏–Ω\n"
            f"‚Ä¢ –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ: {auto}")

def r_wiz_save(uid, chat_id):
    sess = SessionLocal()
    try:
        data = RULE_WIZ.get(uid, {}).get("data", {})
        r = Rule(
            user_id=uid,
            direction_id=(data.get("direction_id") or None),
            type=data.get("type","todo"),
            supplier_id=(data.get("supplier_id") or None),
            periodicity=data.get("periodicity","daily"),
            every_n=(data.get("every_n") or None),
            weekdays=(data.get("weekdays") or None),
            notify_time=(data.get("notify_time") if isinstance(data.get("notify_time"), dtime) else None),
            notify_before_min=int(data.get("notify_before_min") or 0),
            auto_create=bool(data.get("auto_create", True)),
            title=data.get("title") or "",
            active=True
        )
        sess.add(r); sess.commit()
        send_safe("‚úÖ –ü—Ä–∞–≤–∏–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\n\n"+rule_brief(r), chat_id)
    finally:
        sess.close()
    r_wiz_reset(uid)

@bot.callback_query_handler(func=lambda c: c.data and parse_cb(c.data) and parse_cb(c.data).get("a","").startswith("r_") or c.data in ("noop",))
def rules_callbacks(c):
    uid = c.from_user.id
    chat_id = c.message.chat.id
    data = parse_cb(c.data) if c.data!="noop" else None
    if not data:
        bot.answer_callback_query(c.id); return
    a = data.get("a")

    # –æ—Ç–º–µ–Ω–∞/–Ω–∞–∑–∞–¥
    if a == "r_cancel":
        r_wiz_reset(uid)
        bot.answer_callback_query(c.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")
        send_safe("–û–∫, –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞.", chat_id); return
    if a == "r_back":
        step = r_wiz(uid).get("step")
        # –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π —à–∞–≥ –Ω–∞–∑–∞–¥ –ø–æ –¥–µ—Ä–µ–≤—É
        if step in ("type","dir"): ask_direction(chat_id); r_wiz(uid)["step"]="dir"
        elif step in ("supplier","priority"): ask_type(chat_id); r_wiz(uid)["step"]="type"
        elif step in ("per","weekdays","everyn"): ask_periodicity(chat_id); r_wiz(uid)["step"]="per"
        elif step in ("time","before"): ask_notify_time(chat_id); r_wiz(uid)["step"]="time"
        elif step in ("auto","title"): ask_before(chat_id); r_wiz(uid)["step"]="before"
        else:
            send_safe("–í–µ—Ä–Ω—É–ª—Å—è –≤ –Ω–∞—á–∞–ª–æ.", chat_id); r_wiz_reset(uid)
        bot.answer_callback_query(c.id); return

    # —Å—Ç–∞—Ä—Ç —Å–æ–∑–¥–∞–Ω–∏—è
    if a == "r_add":
        RULE_WIZ[uid] = {"step":"dir","data":{}}
        ask_direction(chat_id)
        bot.answer_callback_query(c.id); return

    # –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if a == "r_dir":
        r_wiz(uid)["data"]["direction_id"] = int(data.get("id") or 0) or None
        r_wiz(uid)["step"] = "type"
        ask_type(chat_id)
        bot.answer_callback_query(c.id); return

    # –≤—ã–±–æ—Ä —Ç–∏–ø–∞
    if a == "r_type":
        r_wiz(uid)["data"]["type"] = data.get("v")
        if data.get("v") == "purchase":
            r_wiz(uid)["step"] = "supplier"
            ask_supplier(chat_id, r_wiz(uid)["data"].get("direction_id"))
        else:
            r_wiz(uid)["step"] = "per"
            ask_periodicity(chat_id)
        bot.answer_callback_query(c.id); return

    # –≤—ã–±–æ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    if a == "r_sup":
        r_wiz(uid)["data"]["supplier_id"] = int(data.get("id") or 0) or None
        r_wiz(uid)["step"] = "per"
        ask_periodicity(chat_id)
        bot.answer_callback_query(c.id); return

    # –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å
    if a == "r_per":
        v = data.get("v")
        r_wiz(uid)["data"]["periodicity"] = v
        if v == "weekdays":
            r_wiz(uid)["data"]["weekdays"] = ""
            r_wiz(uid)["step"] = "weekdays"
            ask_weekdays(chat_id, "")
        elif v == "every_n_days":
            r_wiz(uid)["step"] = "everyn"
            ask_every_n(chat_id)
        else:
            r_wiz(uid)["step"] = "time"
            ask_notify_time(chat_id)
        bot.answer_callback_query(c.id); return

    # –≤—ã–±–æ—Ä –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏)
    if a == "r_wd":
        cur = r_wiz(uid)["data"].get("weekdays","")
        parts = [x.strip() for x in cur.split(",") if x.strip()]
        d = data.get("d")
        if d in parts:
            parts.remove(d)
        else:
            parts.append(d)
        r_wiz(uid)["data"]["weekdays"] = ",".join([p for p in parts if p])
        ask_weekdays(chat_id, r_wiz(uid)["data"]["weekdays"])
        bot.answer_callback_query(c.id); return

    if a == "r_wd_done":
        if not r_wiz(uid)["data"].get("weekdays"):
            bot.answer_callback_query(c.id, "–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å", show_alert=True); return
        r_wiz(uid)["step"] = "time"
        ask_notify_time(chat_id)
        bot.answer_callback_query(c.id); return

    # –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if a == "r_time_set":
        if data.get("v") == "none":
            r_wiz(uid)["data"]["notify_time"] = None
            r_wiz(uid)["step"] = "before"
            ask_before(chat_id)
        else:
            r_wiz(uid)["step"] = "time_ask"
            send_safe("–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú", chat_id)
        bot.answer_callback_query(c.id); return

    # —Ä–∞–Ω–Ω–∏–π –ø–∏–Ω–≥ (–º–∏–Ω—É—Ç—ã)
    if a == "r_before":
        r_wiz(uid)["data"]["notify_before_min"] = int(data.get("v") or 0)
        r_wiz(uid)["step"] = "auto"
        ask_auto(chat_id)
        bot.answer_callback_query(c.id); return

    # –∞–≤—Ç–æ‚Äë—Å–æ–∑–¥–∞–Ω–∏–µ
    if a == "r_auto_set":
        r_wiz(uid)["data"]["auto_create"] = bool(int(data.get("v")))
        r_wiz(uid)["step"] = "title"
        ask_title(chat_id)
        bot.answer_callback_query(c.id); return

    # –∫–∞—Ä—Ç–æ—á–∫–∞/–¥–µ–π—Å—Ç–≤–∏—è –ø–æ –ø—Ä–∞–≤–∏–ª—É
    if a == "r_info":
        rid = int(data.get("id"))
        sess = SessionLocal()
        try:
            r = sess.query(Rule).filter(Rule.id==rid, Rule.user_id==uid).first()
            if not r:
                bot.answer_callback_query(c.id, "–ü—Ä–∞–≤–∏–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True); return
            kb = types.InlineKeyboardMarkup()
            kb.row(
                types.InlineKeyboardButton("‚úèÔ∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫", callback_data=mk_cb("r_edit", id=rid)),
                types.InlineKeyboardButton("üîî –í—Ä–µ–º—è", callback_data=mk_cb("r_time", id=rid)),
            )
            kb.row(
                types.InlineKeyboardButton("üîÑ –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ", callback_data=mk_cb("r_auto", id=rid)),
                types.InlineKeyboardButton("‚èØ –ê–∫—Ç–∏–≤–Ω–æ/–í—ã–∫–ª", callback_data=mk_cb("r_active", id=rid)),
            )
            kb.row(types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=mk_cb("r_del", id=rid)))
            send_safe(rule_brief(r), chat_id, reply_markup=kb)
        finally:
            sess.close()
        bot.answer_callback_query(c.id); return

    if a == "r_auto":
        rid = int(data.get("id"))
        sess = SessionLocal()
        try:
            r = sess.query(Rule).filter(Rule.id==rid, Rule.user_id==uid).first()
            if not r: bot.answer_callback_query(c.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True); return
            r.auto_create = not r.auto_create; sess.commit()
            bot.answer_callback_query(c.id, f"–ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ: {'on' if r.auto_create else 'off'}")
        finally:
            sess.close()
        return

    if a == "r_active":
        rid = int(data.get("id"))
        sess = SessionLocal()
        try:
            r = sess.query(Rule).filter(Rule.id==rid, Rule.user_id==uid).first()
            if not r: bot.answer_callback_query(c.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True); return
            r.active = not r.active; sess.commit()
            bot.answer_callback_query(c.id, f"{'–í–∫–ª—é—á–µ–Ω–æ' if r.active else '–í—ã–∫–ª—é—á–µ–Ω–æ'}")
        finally:
            sess.close()
        return

    if a == "r_del":
        rid = int(data.get("id"))
        sess = SessionLocal()
        try:
            r = sess.query(Rule).filter(Rule.id==rid, Rule.user_id==uid).first()
            if not r: bot.answer_callback_query(c.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True); return
            sess.delete(r); sess.commit()
            bot.answer_callback_query(c.id, "–£–¥–∞–ª–µ–Ω–æ", show_alert=True)
        finally:
            sess.close()
        return

    if a == "r_edit":
        rid = int(data.get("id"))
        RULE_EDIT[uid] = {"field":"title", "rule_id":rid}
        bot.answer_callback_query(c.id)
        send_safe("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∞–≤–∏–ª–∞:", chat_id)
        return

    if a == "r_time":
        rid = int(data.get("id"))
        RULE_EDIT[uid] = {"field":"time", "rule_id":rid}
        bot.answer_callback_query(c.id)
        send_safe("–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –ß–ß:–ú–ú –∏–ª–∏ ¬´none¬ª", chat_id)
        return

# ---- –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —à–∞–≥–æ–≤ –º–∞—Å—Ç–µ—Ä–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ----
@bot.message_handler(func=lambda m: RULE_WIZ.get(m.chat.id, {}).get("step") in ("everyn","time_ask","title") or RULE_EDIT.get(m.chat.id))
def rules_text_steps(m):
    uid = m.chat.id
    sess = None
    # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
    if RULE_EDIT.get(uid):
        rid = RULE_EDIT[uid]["rule_id"]; field = RULE_EDIT[uid]["field"]
        sess = SessionLocal()
        try:
            r = sess.query(Rule).filter(Rule.id==rid, Rule.user_id==uid).first()
            if not r:
                RULE_EDIT.pop(uid, None)
                send_safe("–ü—Ä–∞–≤–∏–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", uid); return
            txt = (m.text or "").strip()
            if field == "title":
                r.title = txt
                sess.commit()
                send_safe("‚úÖ –û–±–Ω–æ–≤–∏–ª –∑–∞–≥–æ–ª–æ–≤–æ–∫.\n\n"+rule_brief(r), uid)
            elif field == "time":
                if txt.lower() == "none":
                    r.notify_time = None
                else:
                    try:
                        r.notify_time = parse_time(txt)
                    except Exception:
                        send_safe("–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: –ß–ß:–ú–ú –∏–ª–∏ ¬´none¬ª", uid); return
                sess.commit()
                send_safe("‚úÖ –û–±–Ω–æ–≤–∏–ª –≤—Ä–µ–º—è.\n\n"+rule_brief(r), uid)
        finally:
            sess.close()
        RULE_EDIT.pop(uid, None)
        return

    # —à–∞–≥–∏ –º–∞—Å—Ç–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    step = RULE_WIZ[uid]["step"]
    if step == "everyn":
        try:
            n = int((m.text or "").strip())
            if n <= 0: raise ValueError()
        except Exception:
            send_safe("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ > 0. –í–≤–µ–¥–∏ N –µ—â—ë —Ä–∞–∑:", uid); return
        RULE_WIZ[uid]["data"]["every_n"] = n
        RULE_WIZ[uid]["step"] = "time"
        ask_notify_time(uid)
        return

    if step == "time_ask":
        txt = (m.text or "").strip()
        try:
            RULE_WIZ[uid]["data"]["notify_time"] = parse_time(txt)
        except Exception:
            send_safe("–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: –ß–ß:–ú–ú. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:", uid); return
        RULE_WIZ[uid]["step"] = "before"
        ask_before(uid)
        return

    if step == "title":
        RULE_WIZ[uid]["data"]["title"] = (m.text or "").strip()
        send_safe("–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–¥–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è—é:\n\n"+r_wiz_summary(RULE_WIZ[uid]["data"]), uid)
        r_wiz_save(uid, uid)
        return

# --------- –ü—Ä–∞–≤–∏–ª–∞ (–¥–∂–æ–± –∏ —É—Ç–∏–ª–∏—Ç—ã) ---------
def make_auto_key(user_id:int, dt:date, title:str, direction_id:Optional[int], supplier_id:Optional[int], task_type:str)->str:
    raw = f"{user_id}|{dt.isoformat()}|{title}|{direction_id or 0}|{supplier_id or 0}|{task_type}"
    return hashlib.sha1(raw.encode("utf-8")).hexdigest()

def rule_hits_today(r: Rule, target: date) -> bool:
    if r.periodicity == "daily":
        return True
    if r.periodicity == "every_n_days":
        base = (r.created_at.date() if r.created_at else date(2025,1,1))
        delta = (target - base).days
        return (delta >= 0 and r.every_n and r.every_n > 0 and delta % r.every_n == 0)
    if r.periodicity == "weekdays":
        days = {"–ø–Ω":0,"–≤—Ç":1,"—Å—Ä":2,"—á—Ç":3,"–ø—Ç":4,"—Å–±":5,"–≤—Å":6}
        wd_list = [x.strip() for x in (r.weekdays or "").split(",") if x.strip()]
        wanted = {days.get(x) for x in wd_list if x in days}
        return target.weekday() in wanted
    return False

def rule_human(r: Rule) -> str:
    base = "üìå" if r.type=="todo" else "üì¶"
    return f"{base} {r.title or '(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)'}"

def job_rules_tick():
    sess = SessionLocal()
    try:
        now = now_local()
        today = now.date()
        rules = sess.query(Rule).filter(Rule.active==True).all()
        for r in rules:
            # —Ä–∞–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if r.notify_time:
                nt = datetime.combine(today, r.notify_time)
                if nt.tzinfo is None:
                    nt = LOCAL_TZ.localize(nt)
                before = nt - timedelta(minutes=(r.notify_before_min or 0))
                if before <= now < nt:
                    try:
                        send_safe(f"‚è∞ –°–∫–æ—Ä–æ –ø–æ –ø—Ä–∞–≤–∏–ª—É: {rule_human(r)}", r.user_id)
                    except Exception as e:
                        log.warning("rule notify_before send error: %s", e)

            # –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á
            if rule_hits_today(r, today) and r.auto_create:
                title = r.title or ("–ó–∞–¥–∞—á–∞ –ø–æ –ø—Ä–∞–≤–∏–ª—É" if r.type=="todo" else "–ó–∞–∫–∞–∑ –ø–æ –ø—Ä–∞–≤–∏–ª—É")
                ak = make_auto_key(r.user_id, today, title, r.direction_id, r.supplier_id, r.type)
                dup = sess.query(Task).filter(Task.user_id==r.user_id, Task.date==today, Task.auto_key==ak).first()
                if not dup:
                    t = Task(
                        user_id=r.user_id, date=today, text=title,
                        task_type=r.type, direction_id=r.direction_id,
                        supplier_id=r.supplier_id,
                        priority=("medium" if r.type=="todo" else "high"),
                        auto_key=ak, category="–õ–∏—á–Ω–æ–µ", subcategory=""
                    )
                    sess.add(t)
        sess.commit()
    finally:
        sess.close()

# --------- Schedulers ---------
def job_daily_digest():
    sess = SessionLocal()
    try:
        today = now_local().date()
        users = sess.query(User).all()
        for u in users:
            if not u.digest_08: continue
            expand_repeats_for_date(sess, u.id, today)
            tasks = tasks_for_date(sess, u.id, today)
            if not tasks: continue
            text = f"üìÖ –ü–ª–∞–Ω –Ω–∞ {dstr(today)}\n\n" + format_grouped(tasks, header_date=dstr(today))
            try:
                send_safe(text, u.id)
            except Exception as e:
                log.error("digest send error: %s", e)
    finally:
        sess.close()

def job_check_reminders():
    sess = SessionLocal()
    try:
        now = now_local()
        due = (sess.query(Reminder)
               .filter(Reminder.fired==False,
                       or_(Reminder.date<now.date(),
                           and_(Reminder.date==now.date(), Reminder.time<=now.time())))
               .all())
        for r in due:
            t = sess.query(Task).filter(Task.id==r.task_id, Task.user_id==r.user_id).first()
            if not t:
                r.fired = True
                continue
            try:
                send_safe(f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {t.text} (–¥–æ {tstr(t.deadline)})", r.user_id)
            except Exception as e:
                log.error("reminder send error: %s", e)
            r.fired = True
        sess.commit()
    finally:
        sess.close()

def job_orchestrator_minutely():
    global LAST_TICK
    LAST_TICK = datetime.utcnow()
    job_check_reminders()
    job_rules_tick()

def scheduler_loop():
    schedule.clear()
    schedule.every().day.at("08:00").do(job_daily_digest)
    schedule.every(1).minutes.do(job_orchestrator_minutely)
    while True:
        schedule.run_pending()
        time.sleep(1)

# --------- /health ---------
@bot.message_handler(commands=["health"])
def cmd_health(m):
    if ADMIN_IDS and m.from_user and m.from_user.id not in ADMIN_IDS:
        return
    sess = SessionLocal()
    try:
        rc = sess.query(Rule).filter(Rule.active==True).count()
    finally:
        sess.close()
    lt = LAST_TICK.isoformat() if LAST_TICK else "‚Äî"
    send_safe(f"‚úÖ OK\nLast tick: {lt}\nActive rules: {rc}\nTZ: {TZ_NAME}", m.chat.id)

# --------- START (polling) ---------
if __name__ == "__main__":
    try:
        bot.remove_webhook()
    except Exception:
        pass
    threading.Thread(target=scheduler_loop, daemon=True).start()
    log.info("Starting polling‚Ä¶")
    while True:
        try:
            bot.infinity_polling(timeout=60, long_polling_timeout=50, skip_pending=True, allowed_updates=["message","callback_query"])
        except Exception as e:
            log.error("polling error: %s ‚Äî retry in 3s", e)
            time.sleep(3)
