# -*- coding: utf-8 -*-
"""
TasksBot (minimal PostgreSQL-only)
- Flask webhook (no polling)
- Gunicorn + systemd friendly
- SQLAlchemy (PostgreSQL)
- Telegram via pyTelegramBotAPI
- Optional OpenAI assistant
Env:
  TELEGRAM_TOKEN, WEBHOOK_BASE, DATABASE_URL, OPENAI_API_KEY (optional), TZ, PORT
"""

import os, re, json, time, hmac, hashlib, logging, threading
from datetime import datetime, timedelta, date
import pytz
import schedule

from flask import Flask, request
from telebot import TeleBot, types

from sqlalchemy import create_engine, Column, Integer, String, Text, Date, Time, DateTime, Boolean, func
from sqlalchemy.orm import declarative_base, sessionmaker, scoped_session

# --------- ENV ---------
API_TOKEN   = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_BASE= os.getenv("WEBHOOK_BASE")
DB_URL      = os.getenv("DATABASE_URL")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TZ_NAME     = os.getenv("TZ", "Europe/Moscow")
PORT        = int(os.getenv("PORT","10000"))
WEBHOOK_URL = f"{WEBHOOK_BASE}/{API_TOKEN}" if (API_TOKEN and WEBHOOK_BASE) else None

if not API_TOKEN or not DB_URL or not WEBHOOK_URL:
    raise RuntimeError("Need TELEGRAM_TOKEN, DATABASE_URL, WEBHOOK_BASE envs")

LOCAL_TZ = pytz.timezone(TZ_NAME)

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("tasksbot")

# --------- OpenAI (optional) ---------
openai_client = None
if OPENAI_API_KEY:
    try:
        from openai import OpenAI
        openai_client = OpenAI(api_key=OPENAI_API_KEY)
    except Exception as e:
        log.warning("OpenAI disabled: %s", e)

# --------- DB ---------
Base = declarative_base()
engine = create_engine(DB_URL, pool_pre_ping=True, future=True)
SessionLocal = scoped_session(sessionmaker(bind=engine, autoflush=False, autocommit=False))

class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True)          # Telegram chat id
    name = Column(String(255), default="")
    created_at = Column(DateTime, server_default=func.now())

class Task(Base):
    __tablename__ = "tasks"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, index=True, nullable=False)
    date = Column(Date, index=True, nullable=False)
    category = Column(String(120), default="–õ–∏—á–Ω–æ–µ", index=True)
    subcategory = Column(String(120), default="", index=True)
    text = Column(Text, nullable=False)
    deadline = Column(Time, nullable=True)
    status = Column(String(40), default="")     # "", "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
    repeat_rule = Column(String(255), default="")
    source = Column(String(255), default="")
    is_repeating = Column(Boolean, default=False)
    created_at = Column(DateTime, server_default=func.now())

class Supplier(Base):
    __tablename__ = "suppliers"
    id = Column(Integer, primary_key=True)
    name = Column(String(255), unique=True, nullable=False)
    rule = Column(String(255), default="")              # "–∫–∞–∂–¥—ã–µ 2 –¥–Ω—è" / "shelf 72h"
    order_deadline = Column(String(10), default="14:00")
    emoji = Column(String(8), default="üì¶")
    delivery_offset_days = Column(Integer, default=1)
    shelf_days = Column(Integer, default=0)
    start_cycle = Column(Date, nullable=True)
    auto = Column(Boolean, default=True)
    active = Column(Boolean, default=True)
    created_at = Column(DateTime, server_default=func.now())

class Reminder(Base):
    __tablename__ = "reminders"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, index=True)
    task_id = Column(Integer, index=True)
    date = Column(Date, nullable=False)
    time = Column(Time, nullable=False)
    fired = Column(Boolean, default=False)
    created_at = Column(DateTime, server_default=func.now())

Base.metadata.create_all(bind=engine)

# --------- BOT / APP ---------
bot = TeleBot(API_TOKEN, parse_mode="HTML")
app = Flask(__name__)

# --------- Utils ---------
PAGE = 8

def now_local():
    return datetime.now(LOCAL_TZ)

def dstr(d: date):
    return d.strftime("%d.%m.%Y")

def parse_date(s): return datetime.strptime(s, "%d.%m.%Y").date()
def parse_time(s): return datetime.strptime(s, "%H:%M").time()

def weekday_ru(d: date):
    names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    return names[d.weekday()]

def mk_cb(action, **kwargs):
    payload = {"a": action, **kwargs}
    s = json.dumps(payload, ensure_ascii=False)
    sig = hmac.new(b"cb-key", s.encode("utf-8"), hashlib.sha1).hexdigest()[:6]
    return f"{sig}|{s}"

def parse_cb(data):
    try:
        sig, s = data.split("|", 1)
        if hmac.new(b"cb-key", s.encode("utf-8"), hashlib.sha1).hexdigest()[:6] != sig:
            return None
        return json.loads(s)
    except Exception:
        return None

def ensure_user(sess, uid, name=""):
    u = sess.query(User).filter_by(id=uid).first()
    if not u:
        u = User(id=uid, name=name or "")
        sess.add(u); sess.commit()
    return u

# --------- Suppliers rules ---------
BASE_SUP_RULES = {
    "–∫-—ç–∫—Å–ø—Ä–æ": {"kind":"cycle_every_n_days","n_days":2,"delivery_offset":1,"deadline":"14:00","emoji":"üì¶"},
    "–∏–ø –≤—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞": {"kind":"delivery_shelf_then_order","delivery_offset":1,"shelf_days":3,"deadline":"14:00","emoji":"ü•ò"},
}
def norm_sup(name:str): return (name or "").strip().lower()

def load_rule(sess, supplier_name:str):
    s = sess.query(Supplier).filter(func.lower(Supplier.name)==norm_sup(supplier_name)).first()
    if s and s.active:
        rl = (s.rule or "").lower()
        if "–∫–∞–∂–¥—ã–µ" in rl:
            import re
            n = 2
            m = re.findall(r"\d+", rl)
            if m: n = int(m[0])
            return {"kind":"cycle_every_n_days","n_days":n,"delivery_offset":s.delivery_offset_days or 1,
                    "deadline":s.order_deadline or "14:00","emoji":s.emoji or "üì¶"}
        if any(x in rl for x in ["shelf","72","—Ö—Ä–∞–Ω–µ–Ω"]):
            return {"kind":"delivery_shelf_then_order","delivery_offset":s.delivery_offset_days or 1,
                    "shelf_days":s.shelf_days or 3,"deadline":s.order_deadline or "14:00","emoji":s.emoji or "ü•ò"}
    return BASE_SUP_RULES.get(norm_sup(supplier_name))

def plan_next(sess, user_id:int, supplier:str, category:str, subcategory:str):
    rule = load_rule(sess, supplier)
    if not rule: return []
    today = now_local().date()
    out = []
    if rule["kind"]=="cycle_every_n_days":
        delivery = today + timedelta(days=rule["delivery_offset"])
        next_order = today + timedelta(days=rule["n_days"])
        sess.add(Task(user_id=user_id, date=delivery, category=category, subcategory=subcategory,
                      text=f"{rule['emoji']} –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier} ({subcategory or '‚Äî'})",
                      deadline=parse_time("10:00")))
        sess.add(Task(user_id=user_id, date=next_order, category=category, subcategory=subcategory,
                      text=f"{rule['emoji']} –ó–∞–∫–∞–∑–∞—Ç—å {supplier} ({subcategory or '‚Äî'})",
                      deadline=parse_time(rule["deadline"])))
        sess.commit()
        out = [("delivery", delivery), ("order", next_order)]
    else:
        delivery = today + timedelta(days=rule["delivery_offset"])
        next_order = delivery + timedelta(days=max(1, (rule.get("shelf_days",3)-1)))
        sess.add(Task(user_id=user_id, date=delivery, category=category, subcategory=subcategory,
                      text=f"{rule['emoji']} –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier} ({subcategory or '‚Äî'})",
                      deadline=parse_time("11:00")))
        sess.add(Task(user_id=user_id, date=next_order, category=category, subcategory=subcategory,
                      text=f"{rule['emoji']} –ó–∞–∫–∞–∑–∞—Ç—å {supplier} ({subcategory or '‚Äî'})",
                      deadline=parse_time(rule["deadline"])))
        sess.commit()
        out = [("delivery", delivery), ("order", next_order)]
    return out

# --------- Formatting ---------
def short_line(t: Task, idx=None):
    dl = t.deadline.strftime("%H:%M") if t.deadline else "‚Äî"
    p = f"{idx}. " if idx is not None else ""
    return f"{p}{t.category}/{t.subcategory}: {t.text[:40]}‚Ä¶ (–¥–æ {dl})"

def format_grouped(tasks, header_date=None):
    if not tasks: return "–ó–∞–¥–∞—á –Ω–µ—Ç."
    out = []
    if header_date:
        out.append(f"‚Ä¢ {weekday_ru(tasks[0].date)} ‚Äî {header_date}\n")
    cur_cat = cur_sub = None
    for t in sorted(tasks, key=lambda x: (x.category or "", x.subcategory or "", x.deadline or datetime.min.time(), x.text)):
        icon = "‚úÖ" if t.status=="–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else "‚¨ú"
        if t.category != cur_cat:
            out.append(f"üìÇ <b>{t.category or '‚Äî'}</b>"); cur_cat = t.category; cur_sub = None
        if t.subcategory != cur_sub:
            out.append(f"  ‚îî <b>{t.subcategory or '‚Äî'}</b>"); cur_sub = t.subcategory
        line = f"    ‚îî {icon} {t.text}"
        if t.deadline: line += f"  <i>(–¥–æ {t.deadline.strftime('%H:%M')})</i>"
        out.append(line)
    return "\n".join(out)

def page_kb(items, page, total, action="open"):
    kb = types.InlineKeyboardMarkup()
    for label, tid in items:
        kb.add(types.InlineKeyboardButton(label, callback_data=mk_cb(action, id=tid)))
    nav = []
    if page>1: nav.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=mk_cb("page", p=page-1, pa=action)))
    nav.append(types.InlineKeyboardButton(f"{page}/{total}", callback_data="noop"))
    if page<total: nav.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=mk_cb("page", p=page+1, pa=action)))
    if nav: kb.row(*nav)
    return kb

# --------- Data access ---------
def tasks_for_date(sess, uid:int, d:date):
    return (sess.query(Task)
            .filter(Task.user_id==uid, Task.date==d)
            .order_by(Task.category.asc(), Task.subcategory.asc(), Task.deadline.asc().nulls_last())
            ).all()

def tasks_for_week(sess, uid:int, base:date):
    days = [base + timedelta(days=i) for i in range(7)]
    return (sess.query(Task)
            .filter(Task.user_id==uid, Task.date.in_(days))
            .order_by(Task.date.asc(), Task.category.asc(), Task.subcategory.asc(), Task.deadline.asc().nulls_last())
            ).all()

# --------- Menus ---------
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üìÖ –°–µ–≥–æ–¥–Ω—è","üìÜ –ù–µ–¥–µ–ª—è")
    kb.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å","‚úÖ –Ø —Å–¥–µ–ª–∞–ª‚Ä¶","üß† –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
    return kb

# --------- NLP add ---------
def ai_parse_items(text, uid):
    # try OpenAI JSON
    if openai_client:
        try:
            sys = ("–¢—ã –ø–∞—Ä—Å–µ—Ä –∑–∞–¥–∞—á. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON-–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤: "
                   "{date:'–î–î.–ú–ú.–ì–ì–ì–ì'|'', time:'–ß–ß:–ú–ú'|'', category, subcategory, task, repeat:'', supplier:''}.")
            resp = openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role":"system","content":sys},{"role":"user","content":text}],
                temperature=0.2
            )
            raw = resp.choices[0].message.content.strip()
            data = json.loads(raw)
            if isinstance(data, dict): data = [data]
            out = []
            for it in data:
                out.append({
                    "date": it.get("date") or "",
                    "time": it.get("time") or "",
                    "category": it.get("category") or "–õ–∏—á–Ω–æ–µ",
                    "subcategory": it.get("subcategory") or "",
                    "task": it.get("task") or "",
                    "repeat": it.get("repeat") or "",
                    "supplier": it.get("supplier") or "",
                    "user_id": uid
                })
            return out
        except Exception as e:
            log.warning("AI parse fail: %s", e)
    # fallback
    tl = text.lower()
    cat = "–ö–æ—Ñ–µ–π–Ω—è" if any(x in tl for x in ["–∫–æ—Ñ–µ–π–Ω","–∫-—ç–∫—Å–ø—Ä–æ","–≤—ã–ª–µ–≥–∂–∞–Ω"]) else ("–¢–∞–±–∞—á–∫–∞" if "—Ç–∞–±–∞—á" in tl else "–õ–∏—á–Ω–æ–µ")
    sub = "–¶–µ–Ω—Ç—Ä" if "—Ü–µ–Ω—Ç—Ä" in tl else ("–ü–æ–ª–µ—Ç" if ("–ø–æ–ª–µ—Ç" in tl or "–ø–æ–ª—ë—Ç" in tl) else ("–ö–ª–∏–º–æ–≤–æ" if "–∫–ª–∏–º–æ–≤" in tl else ""))
    tm = re.search(r"(\d{1,2}:\d{2})", text)
    time_s = tm.group(1) if tm else ""
    if "—Å–µ–≥–æ–¥–Ω—è" in tl: ds = dstr(now_local().date())
    elif "–∑–∞–≤—Ç—Ä–∞" in tl: ds = dstr(now_local().date()+timedelta(days=1))
    else:
        m = re.search(r"(\d{2}\.\d{2}\.\d{4})", text); ds = m.group(1) if m else ""
    supplier = "–ö-–≠–∫—Å–ø—Ä–æ" if ("–∫-—ç–∫—Å–ø—Ä–æ" in tl or "k-exp" in tl or "–∫ —ç–∫—Å–ø—Ä–æ" in tl) else ("–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞" if "–≤—ã–ª–µ–≥–∂–∞–Ω" in tl else "")
    return [{
        "date": ds, "time": time_s, "category": cat, "subcategory": sub,
        "task": text.strip(), "repeat":"", "supplier": supplier, "user_id": uid
    }]

# --------- Handlers ---------
@bot.message_handler(commands=["start"])
def start(m):
    sess = SessionLocal()
    try:
        ensure_user(sess, m.chat.id, m.from_user.full_name if m.from_user else "")
    finally:
        sess.close()
    bot.send_message(m.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–¥–∞—á–∞–º.", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üìÖ –°–µ–≥–æ–¥–Ω—è")
def today(m):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        rows = tasks_for_date(sess, uid, now_local().date())
        if not rows:
            bot.send_message(uid, f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ {dstr(now_local().date())}\n\n–ó–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=main_menu()); return
        items = [(short_line(t, i), t.id) for i,t in enumerate(rows, start=1)]
        total = (len(items)+PAGE-1)//PAGE
        kb = page_kb(items[:PAGE], 1, total, "open")
        header = f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ {dstr(now_local().date())}\n\n" + format_grouped(rows, header_date=dstr(now_local().date())) + "\n\n–û—Ç–∫—Ä–æ–π –∫–∞—Ä—Ç–æ—á–∫—É:"
        bot.send_message(uid, header, reply_markup=main_menu(), reply_markup_inline=kb)
    finally:
        sess.close()

@bot.message_handler(func=lambda msg: msg.text == "üìÜ –ù–µ–¥–µ–ª—è")
def week(m):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        rows = tasks_for_week(sess, uid, now_local().date())
        if not rows:
            bot.send_message(uid, "–ù–∞ –Ω–µ–¥–µ–ª—é –∑–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=main_menu()); return
        by = {}
        for t in rows: by.setdefault(dstr(t.date), []).append(t)
        parts = []
        for ds in sorted(by.keys(), key=lambda s: parse_date(s)):
            parts.append(format_grouped(by[ds], header_date=ds)); parts.append("")
        bot.send_message(uid, "\n".join(parts), reply_markup=main_menu())
    finally:
        sess.close()

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def add(m):
    bot.send_message(m.chat.id, "–û–ø–∏—à–∏ –∑–∞–¥–∞—á—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–¥–∞—Ç—É/–≤—Ä–µ–º—è/–∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å–ø–æ–∑–Ω–∞—é).")
    bot.register_next_step_handler(m, add_text)

def add_text(m):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        items = ai_parse_items(m.text.strip(), uid)
        created = 0
        for it in items:
            dt = parse_date(it["date"]) if it["date"] else now_local().date()
            tm = parse_time(it["time"]) if it["time"] else None
            t = Task(user_id=uid, date=dt, category=it["category"], subcategory=it["subcategory"],
                     text=it["task"], deadline=tm, repeat_rule=it["repeat"], source=it["supplier"],
                     is_repeating=bool(it["repeat"]))
            sess.add(t); created += 1
        sess.commit()
        bot.send_message(uid, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {created}", reply_markup=main_menu())
    finally:
        sess.close()

@bot.message_handler(func=lambda msg: msg.text == "‚úÖ –Ø —Å–¥–µ–ª–∞–ª‚Ä¶")
def done_free(m):
    bot.send_message(m.chat.id, "–ù–∞–ø–∏—à–∏ —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–¥–µ–ª–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å–¥–µ–ª–∞–ª –∑–∞–∫–∞–∑—ã –∫-—ç–∫—Å–ø—Ä–æ —Ü–µ–Ω—Ç—Ä).")
    bot.register_next_step_handler(m, done_text)

def done_text(m):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        txt = m.text.lower()
        supplier = ""
        if any(x in txt for x in ["–∫-—ç–∫—Å–ø—Ä–æ","k-exp","–∫ —ç–∫—Å–ø—Ä–æ"]): supplier = "–ö-–≠–∫—Å–ø—Ä–æ"
        if "–≤—ã–ª–µ–≥–∂–∞–Ω" in txt: supplier = "–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞"
        rows = tasks_for_date(sess, uid, now_local().date())
        changed = 0; last = None
        for t in rows:
            if t.status=="–≤—ã–ø–æ–ª–Ω–µ–Ω–æ": continue
            low = (t.text or "").lower()
            if supplier and norm_sup(supplier) not in norm_sup(low): continue
            if not supplier and not any(w in low for w in ["–∑–∞–∫–∞–∑","–∑–∞–∫—É–ø","—Å–¥–µ–ª–∞–ª"]): continue
            t.status = "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"; last = t; changed += 1
        sess.commit()
        msg = f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º: {changed}."
        if changed and supplier and last:
            created = plan_next(sess, uid, supplier, last.category, last.subcategory)
            if created: msg += " –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏–µ–º–∫–∞/—Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑."
        bot.send_message(uid, msg, reply_markup=main_menu())
    finally:
        sess.close()

@bot.callback_query_handler(func=lambda c: True)
def cb(c):
    data = parse_cb(c.data) if c.data and c.data!="noop" else None
    uid = c.message.chat.id
    if not data: bot.answer_callback_query(c.id); return
    a = data.get("a")
    sess = SessionLocal()
    try:
        if a=="open":
            tid = int(data.get("id"))
            t = sess.query(Task).filter(Task.id==tid, Task.user_id==uid).first()
            if not t: bot.answer_callback_query(c.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True); return
            dl = t.deadline.strftime("%H:%M") if t.deadline else "‚Äî"
            text = (f"<b>{t.text}</b>\n"
                    f"üìÖ {weekday_ru(t.date)} ‚Äî {dstr(t.date)}\n"
                    f"üìÅ {t.category}/{t.subcategory or '‚Äî'}\n"
                    f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {dl}\n"
                    f"üìù –°—Ç–∞—Ç—É—Å: {t.status or '‚Äî'}")
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=mk_cb("done", id=tid)))
            kb.add(types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=mk_cb("del", id=tid)))
            bot.answer_callback_query(c.id)
            bot.send_message(uid, text, reply_markup=kb)
            return
        if a=="done":
            tid = int(data.get("id"))
            t = sess.query(Task).filter(Task.id==tid, Task.user_id==uid).first()
            if not t: bot.answer_callback_query(c.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True); return
            t.status = "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"; sess.commit()
            sup = ""
            low = (t.text or "").lower()
            if any(x in low for x in ["–∫-—ç–∫—Å–ø—Ä–æ","k-exp","–∫ —ç–∫—Å–ø—Ä–æ"]): sup="–ö-–≠–∫—Å–ø—Ä–æ"
            if "–≤—ã–ª–µ–≥–∂–∞–Ω" in low: sup="–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞"
            msg = "‚úÖ –ì–æ—Ç–æ–≤–æ."
            if sup:
                created = plan_next(sess, uid, sup, t.category, t.subcategory)
                if created: msg += " –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏–µ–º–∫–∞/—Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑."
            bot.answer_callback_query(c.id, msg, show_alert=True); return
        if a=="del":
            tid = int(data.get("id"))
            t = sess.query(Task).filter(Task.id==tid, Task.user_id==uid).first()
            if not t: bot.answer_callback_query(c.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True); return
            sess.delete(t); sess.commit()
            bot.answer_callback_query(c.id, "–£–¥–∞–ª–µ–Ω–æ", show_alert=True); return
        if a=="page":
            # –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ "—Å–µ–≥–æ–¥–Ω—è"
            uid = c.message.chat.id
            rows = tasks_for_date(sess, uid, now_local().date())
            items = [(short_line(t, i), t.id) for i,t in enumerate(rows, start=1)]
            page = int(data.get("p",1))
            total = (len(items)+PAGE-1)//PAGE
            page = max(1, min(page, total))
            slice_items = items[(page-1)*PAGE:page*PAGE]
            kb = page_kb(slice_items, page, total, "open")
            try:
                bot.edit_message_reply_markup(uid, c.message.message_id, reply_markup=kb)
            except Exception:
                pass
            bot.answer_callback_query(c.id); return
    finally:
        sess.close()

# --------- Scheduler jobs ---------
def job_daily_digest():
    sess = SessionLocal()
    try:
        today = now_local().date()
        users = sess.query(User).all()
        for u in users:
            tasks = tasks_for_date(sess, u.id, today)
            if not tasks: continue
            text = f"üìÖ –ü–ª–∞–Ω –Ω–∞ {dstr(today)}\n\n" + format_grouped(tasks, header_date=dstr(today))
            try:
                bot.send_message(u.id, text)
            except Exception as e:
                log.error("digest send error: %s", e)
    finally:
        sess.close()

def scheduler_loop():
    schedule.clear()
    schedule.every().day.at("08:00").do(job_daily_digest)
    while True:
        schedule.run_pending()
        time.sleep(1)

# --------- Flask webhook ---------
@app.route("/" + API_TOKEN, methods=["POST"])
def webhook():
    try:
        update = request.get_data().decode("utf-8")
        upd = types.Update.de_json(update)
        bot.process_new_updates([upd])
    except Exception as e:
        log.error("webhook error: %s", e)
    return "OK", 200

@app.route("/")
def home():
    return "TasksBot is running"

# --------- START ---------
if __name__ == "__main__":
    try:
        bot.remove_webhook()
    except Exception:
        pass
    time.sleep(0.5)
    bot.set_webhook(url=WEBHOOK_URL)
    threading.Thread(target=scheduler_loop, daemon=True).start()
    app.run(host="0.0.0.0", port=PORT)
