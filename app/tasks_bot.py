# -*- coding: utf-8 -*-
import os, re, json, asyncio, time, hmac, hashlib, logging
from datetime import datetime, timedelta, date, time as dtime

import pytz
from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

from sqlalchemy import (create_engine, Column, Integer, String, Text, Date, Time,
                        DateTime, Boolean, func, and_, or_)
from sqlalchemy.orm import declarative_base, sessionmaker, scoped_session

# -------------------- ENV / Base --------------------
TOKEN = os.getenv("TELEGRAM_TOKEN")
DB_URL = os.getenv("DATABASE_URL")
TZ_NAME = os.getenv("TZ", "Europe/Moscow")
LOCAL_TZ = pytz.timezone(TZ_NAME)

if not TOKEN or not DB_URL:
    raise RuntimeError("Need TELEGRAM_TOKEN and DATABASE_URL envs")

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("tasksbot")

bot = Bot(TOKEN, parse_mode="HTML")
dp = Dispatcher()
router = Router()

Base = declarative_base()
engine = create_engine(DB_URL, pool_pre_ping=True, future=True)
SessionLocal = scoped_session(sessionmaker(bind=engine, autoflush=False, autocommit=False))

# -------------------- Models --------------------
class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True)  # Telegram chat id
    name = Column(String(255), default="")
    created_at = Column(DateTime, server_default=func.now())

class Task(Base):
    __tablename__ = "tasks"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, index=True, nullable=False)
    date = Column(Date, index=True, nullable=False)
    category = Column(String(120), default="–õ–∏—á–Ω–æ–µ", index=True)
    subcategory = Column(String(120), default="", index=True)
    text = Column(Text, nullable=False)
    deadline = Column(Time, nullable=True)
    status = Column(String(40), default="")      # "", "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
    repeat_rule = Column(String(255), default="")
    source = Column(String(255), default="")
    is_repeating = Column(Boolean, default=False)
    created_at = Column(DateTime, server_default=func.now())

class Subtask(Base):
    __tablename__ = "subtasks"
    id = Column(Integer, primary_key=True)
    task_id = Column(Integer, index=True, nullable=False)
    text = Column(Text, nullable=False)
    status = Column(String(40), default="")      # "", "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"

class Supplier(Base):
    __tablename__ = "suppliers"
    id = Column(Integer, primary_key=True)
    name = Column(String(255), unique=True, nullable=False)
    rule = Column(String(255), default="")              # "–∫–∞–∂–¥—ã–µ 2 –¥–Ω—è" / "shelf 72h"
    order_deadline = Column(String(10), default="14:00")
    emoji = Column(String(8), default="üì¶")
    delivery_offset_days = Column(Integer, default=1)
    shelf_days = Column(Integer, default=0)
    start_cycle = Column(Date, nullable=True)
    auto = Column(Boolean, default=True)
    active = Column(Boolean, default=True)
    created_at = Column(DateTime, server_default=func.now())

class Reminder(Base):
    __tablename__ = "reminders"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, index=True)
    task_id = Column(Integer, index=True)
    date = Column(Date, nullable=False)
    time = Column(Time, nullable=False)
    fired = Column(Boolean, default=False)
    created_at = Column(DateTime, server_default=func.now())

Base.metadata.create_all(bind=engine)

# -------------------- Helpers --------------------
PAGE = 8

def now_local():
    return datetime.now(LOCAL_TZ)

def dstr(d: date) -> str:
    return d.strftime("%d.%m.%Y")

def parse_date(s: str) -> date:
    return datetime.strptime(s, "%d.%m.%Y").date()

def parse_time(s: str) -> dtime:
    return datetime.strptime(s, "%H:%M").time()

def weekday_ru(d: date) -> str:
    names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    return names[d.weekday()]

def ensure_user(sess, uid: int, name=""):
    u = sess.query(User).filter_by(id=uid).first()
    if not u:
        u = User(id=uid, name=name or "")
        sess.add(u); sess.commit()
    return u

# inline payload with small HMAC
def mk_cb(action, **kwargs):
    payload = {"a": action, **kwargs}
    s = json.dumps(payload, ensure_ascii=False)
    sig = hmac.new(b"cb-key", s.encode(), hashlib.sha1).hexdigest()[:6]
    return f"{sig}|{s}"

def parse_cb(data):
    try:
        sig, s = data.split("|", 1)
        if hmac.new(b"cb-key", s.encode(), hashlib.sha1).hexdigest()[:6] != sig:
            return None
        return json.loads(s)
    except Exception:
        return None

def tasks_for_date(sess, uid:int, d:date):
    return (sess.query(Task)
            .filter(Task.user_id==uid, Task.date==d)
            .order_by(Task.category.asc(),
                      Task.subcategory.asc(),
                      Task.deadline.asc().nulls_last())
            ).all()

def tasks_for_week(sess, uid:int, base:date):
    days = [base + timedelta(days=i) for i in range(7)]
    return (sess.query(Task)
            .filter(Task.user_id==uid, Task.date.in_(days))
            .order_by(Task.date.asc(),
                      Task.category.asc(),
                      Task.subcategory.asc(),
                      Task.deadline.asc().nulls_last())
            ).all()

def short_line(t: Task, idx=None):
    dl = t.deadline.strftime("%H:%M") if t.deadline else "‚Äî"
    p = f"{idx}. " if idx is not None else ""
    status = "‚úÖ" if t.status == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else "‚¨ú"
    return f"{p}{status} {t.category}/{t.subcategory or '‚Äî'}: {t.text[:40]}‚Ä¶ (–¥–æ {dl})"

def format_grouped(tasks, header_date=None):
    if not tasks: return "–ó–∞–¥–∞—á –Ω–µ—Ç."
    out = []
    if header_date:
        out.append(f"‚Ä¢ {weekday_ru(tasks[0].date)} ‚Äî {header_date}\n")
    cur_cat = cur_sub = None
    for t in sorted(tasks, key=lambda x: (x.category or "", x.subcategory or "",
                                          x.deadline or dtime.min, x.text)):
        icon = "‚úÖ" if t.status=="–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else "‚¨ú"
        if t.category != cur_cat:
            out.append(f"üìÇ <b>{t.category or '‚Äî'}</b>"); cur_cat = t.category; cur_sub = None
        if t.subcategory != cur_sub:
            out.append(f"  ‚îî <b>{t.subcategory or '‚Äî'}</b>"); cur_sub = t.subcategory
        line = f"    ‚îî {icon} {t.text}"
        if t.deadline: line += f"  <i>(–¥–æ {t.deadline.strftime('%H:%M')})</i>"
        out.append(line)
    return "\n".join(out)

def page_kb(items, page, total, action="open"):
    kb = InlineKeyboardBuilder()
    for label, tid in items:
        kb.button(text=label, callback_data=mk_cb(action, id=tid))
    kb.adjust(1)
    nav_row = []
    if page > 1:
        nav_row.append(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è", callback_data=mk_cb("page", p=page-1, pa=action)))
    nav_row.append(types.InlineKeyboardButton(
        text=f"{page}/{total}", callback_data="noop"))
    if page < total:
        nav_row.append(types.InlineKeyboardButton(
            text="‚û°Ô∏è", callback_data=mk_cb("page", p=page+1, pa=action)))
    if nav_row:
        kb.row(*nav_row)
    return kb.as_markup()

def main_menu():
    kb = ReplyKeyboardBuilder()
    kb.button(text="üìÖ –°–µ–≥–æ–¥–Ω—è"); kb.button(text="üìÜ –ù–µ–¥–µ–ª—è")
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å"); kb.button(text="‚úÖ –Ø —Å–¥–µ–ª–∞–ª‚Ä¶")
    kb.button(text="üîé –ù–∞–π—Ç–∏"); kb.button(text="üß† –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
    kb.button(text="üöö –ü–æ—Å—Ç–∞–≤–∫–∏"); kb.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    kb.adjust(2,2,2,2)
    return kb.as_markup(resize_keyboard=True)

# -------------------- Repeat expansion --------------------
WD = {"–ø–Ω":0,"–≤—Ç":1,"—Å—Ä":2,"—á—Ç":3,"–ø—Ç":4,"—Å–±":5,"–≤—Å":6}
RUS_WEEK = ["–ø–Ω","–≤—Ç","—Å—Ä","—á—Ç","–ø—Ç","—Å–±","–≤—Å"]

def expand_repeats_for_date(sess, uid:int, target:date):
    """–°–æ–∑–¥–∞—ë—Ç –∏–Ω—Å—Ç–∞–Ω—Å—ã –∑–∞–¥–∞—á –∏–∑ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —à–∞–±–ª–æ–Ω–æ–≤ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É (–µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç)."""
    templates = (sess.query(Task)
                 .filter(Task.user_id==uid, Task.is_repeating==True)
                 .all())
    created = 0
    for t in templates:
        rule = (t.repeat_rule or "").strip().lower()
        if not rule: continue

        make = False
        new_deadline = t.deadline
        # –∫–∞–∂–¥—ã–µ N –¥–Ω–µ–π
        m = re.search(r"–∫–∞–∂–¥—ã–µ\s+(\d+)\s*–¥", rule)
        if m:
            n = int(m.group(1))
            start = (t.created_at or datetime(2025,1,1, tzinfo=None)).date()
            delta = (target - start).days
            make = (delta >= 0 and delta % n == 0)

        # –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫ 12:00
        if not make and rule.startswith("–∫–∞–∂–¥—ã–π"):
            # –ø—Ä–∏–º–µ—Ä: "–∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫ 12:00"
            mm = re.search(r"–∫–∞–∂–¥—ã–π\s+([–∞-—è]+)(?:\s+(\d{1,2}:\d{2}))?", rule)
            if mm:
                wd = mm.group(1)[:2]
                hhmm = mm.group(2)
                if wd in WD and target.weekday() == WD[wd]:
                    make = True
                    if hhmm: new_deadline = parse_time(hhmm)

        # –ø–æ –ø–Ω,—Å—Ä[,—á—Ç] (–≤—Ä–µ–º—è –∏–∑ —à–∞–±–ª–æ–Ω–∞)
        if not make and rule.startswith("–ø–æ "):
            days = [x.strip() for x in rule.replace("–ø–æ","").split(",")]
            days = [x[:2] for x in days if x]
            if target.weekday() in [WD.get(x,-1) for x in days]:
                make = True

        if not make:
            continue

        # –¥—É–±–ª—å?
        exists = (sess.query(Task)
                  .filter(Task.user_id==uid,
                          Task.date==target,
                          Task.category==t.category,
                          Task.subcategory==t.subcategory,
                          Task.text==t.text)
                  ).first()
        if exists:
            continue

        sess.add(Task(user_id=uid, date=target,
                      category=t.category, subcategory=t.subcategory,
                      text=t.text, deadline=new_deadline,
                      status="", repeat_rule="", source="repeat-instance",
                      is_repeating=False))
        created += 1
    if created:
        sess.commit()
    return created

# -------------------- Suppliers auto-planning --------------------
BASE_SUP_RULES = {
    "–∫-—ç–∫—Å–ø—Ä–æ": {"kind":"cycle_every_n_days","n_days":2,"delivery_offset":1,"deadline":"14:00","emoji":"üì¶"},
    "–∏–ø –≤—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞": {"kind":"delivery_shelf_then_order","delivery_offset":1,"shelf_days":3,"deadline":"14:00","emoji":"ü•ò"},
}
def norm_sup(name:str): return (name or "").strip().lower()

def load_rule(sess, supplier_name:str):
    s = sess.query(Supplier).filter(func.lower(Supplier.name)==norm_sup(supplier_name)).first()
    if s and s.active:
        rl = (s.rule or "").lower()
        if "–∫–∞–∂–¥—ã–µ" in rl:
            n = 2
            m = re.findall(r"\d+", rl)
            if m: n = int(m[0])
            return {"kind":"cycle_every_n_days","n_days":n,"delivery_offset":s.delivery_offset_days or 1,
                    "deadline":s.order_deadline or "14:00","emoji":s.emoji or "üì¶"}
        if any(x in rl for x in ["shelf","72","—Ö—Ä–∞–Ω–µ–Ω"]):
            return {"kind":"delivery_shelf_then_order","delivery_offset":s.delivery_offset_days or 1,
                    "shelf_days":s.shelf_days or 3,"deadline":s.order_deadline or "14:00","emoji":s.emoji or "ü•ò"}
    return BASE_SUP_RULES.get(norm_sup(supplier_name))

def plan_next(sess, user_id:int, supplier:str, category:str, subcategory:str):
    rule = load_rule(sess, supplier)
    if not rule: return []
    today = now_local().date()
    out = []
    if rule["kind"]=="cycle_every_n_days":
        delivery = today + timedelta(days=rule["delivery_offset"])
        next_order = today + timedelta(days=rule["n_days"])
        sess.add(Task(user_id=user_id, date=delivery, category=category, subcategory=subcategory,
                      text=f"{rule['emoji']} –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier} ({subcategory or '‚Äî'})",
                      deadline=parse_time("10:00")))
        sess.add(Task(user_id=user_id, date=next_order, category=category, subcategory=subcategory,
                      text=f"{rule['emoji']} –ó–∞–∫–∞–∑–∞—Ç—å {supplier} ({subcategory or '‚Äî'})",
                      deadline=parse_time(rule["deadline"])))
        sess.commit()
        out = [("delivery", delivery), ("order", next_order)]
    else:
        delivery = today + timedelta(days=rule["delivery_offset"])
        next_order = delivery + timedelta(days=max(1, (rule.get("shelf_days",3)-1)))
        sess.add(Task(user_id=user_id, date=delivery, category=category, subcategory=subcategory,
                      text=f"{rule['emoji']} –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier} ({subcategory or '‚Äî'})",
                      deadline=parse_time("11:00")))
        sess.add(Task(user_id=user_id, date=next_order, category=category, subcategory=subcategory,
                      text=f"{rule['emoji']} –ó–∞–∫–∞–∑–∞—Ç—å {supplier} ({subcategory or '‚Äî'})",
                      deadline=parse_time(rule["deadline"])))
        sess.commit()
        out = [("delivery", delivery), ("order", next_order)]
    return out

# -------------------- Simple NLP add (–±–µ–∑ OpenAI) --------------------
def ai_parse_items(text, uid):
    tl = text.lower()
    cat = "–ö–æ—Ñ–µ–π–Ω—è" if any(x in tl for x in ["–∫–æ—Ñ–µ–π–Ω","–∫-—ç–∫—Å–ø—Ä–æ","–≤—ã–ª–µ–≥–∂–∞–Ω"]) else ("–¢–∞–±–∞—á–∫–∞" if "—Ç–∞–±–∞—á" in tl else "–õ–∏—á–Ω–æ–µ")
    sub = "–¶–µ–Ω—Ç—Ä" if "—Ü–µ–Ω—Ç—Ä" in tl else ("–ü–æ–ª–µ—Ç" if ("–ø–æ–ª–µ—Ç" in tl or "–ø–æ–ª—ë—Ç" in tl) else ("–ö–ª–∏–º–æ–≤–æ" if "–∫–ª–∏–º–æ–≤" in tl else ""))
    tm = re.search(r"(\d{1,2}:\d{2})", text)
    time_s = tm.group(1) if tm else ""
    if "—Å–µ–≥–æ–¥–Ω—è" in tl: ds = dstr(now_local().date())
    elif "–∑–∞–≤—Ç—Ä–∞" in tl: ds = dstr(now_local().date()+timedelta(days=1))
    else:
        m = re.search(r"(\d{2}\.\d{2}\.\d{4})", text); ds = m.group(1) if m else ""
    supplier = "–ö-–≠–∫—Å–ø—Ä–æ" if ("–∫-—ç–∫—Å–ø—Ä–æ" in tl or "k-exp" in tl or "–∫ —ç–∫—Å–ø—Ä–æ" in tl) else ("–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞" if "–≤—ã–ª–µ–≥–∂–∞–Ω" in tl else "")
    # repeat?
    rep = ""
    m = re.search(r"–∫–∞–∂–¥—ã–µ\s+(\d+)\s*–¥", tl)
    if m: rep = f"–∫–∞–∂–¥—ã–µ {m.group(1)} –¥–Ω–µ–π"
    m2 = re.search(r"–∫–∞–∂–¥—ã–π\s+(–ø–Ω|–≤—Ç|—Å—Ä|—á—Ç|–ø—Ç|—Å–±|–≤—Å)(?:\s+(\d{1,2}:\d{2}))?", tl)
    if m2: rep = f"–∫–∞–∂–¥—ã–π {m2.group(1)} {m2.group(2) or ''}".strip()
    return [{
        "date": ds, "time": time_s, "category": cat, "subcategory": sub,
        "task": text.strip(), "repeat": rep, "supplier": supplier, "user_id": uid
    }]

# -------------------- In‚Äëmemory –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ --------------------
# { user_id: {"mode": "edit_text"/"edit_deadline"/"add_subtask"/"set_reminder", "task_id": <id>} }
WAITING = {}

# -------------------- Handlers --------------------
@router.message(Command("start"))
async def cmd_start(m: types.Message):
    sess = SessionLocal()
    try:
        ensure_user(sess, m.chat.id, m.from_user.full_name if m.from_user else "")
    finally:
        sess.close()
    await m.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–¥–∞—á–∞–º ‚úÖ", reply_markup=main_menu())

@router.message(F.text == "üìÖ –°–µ–≥–æ–¥–Ω—è")
async def today(m: types.Message):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        expand_repeats_for_date(sess, uid, now_local().date())
        rows = tasks_for_date(sess, uid, now_local().date())
        if not rows:
            await m.answer(f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ {dstr(now_local().date())}\n\n–ó–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=main_menu()); return
        items = [(short_line(t, i), t.id) for i,t in enumerate(rows, start=1)]
        total = (len(items)+PAGE-1)//PAGE
        kb = page_kb(items[:PAGE], 1, total, "open")
        header = f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ {dstr(now_local().date())}\n\n" + format_grouped(rows, header_date=dstr(now_local().date())) + "\n\n–û—Ç–∫—Ä–æ–π –∫–∞—Ä—Ç–æ—á–∫—É:"
        await m.answer(header, reply_markup=main_menu(), reply_markup_inline=None)
        await m.answer("–ù–∞–≤–∏–≥–∞—Ü–∏—è:", reply_markup=kb)
    finally:
        sess.close()

@router.message(F.text == "üìÜ –ù–µ–¥–µ–ª—è")
async def week(m: types.Message):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        base = now_local().date()
        # —Ä–∞—Å—à–∏—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä—ã –Ω–∞ –∫–∞–∂–¥—ã–π –∏–∑ 7 –¥–Ω–µ–π
        for i in range(7):
            expand_repeats_for_date(sess, uid, base + timedelta(days=i))
        rows = tasks_for_week(sess, uid, base)
        if not rows:
            await m.answer("–ù–∞ –Ω–µ–¥–µ–ª—é –∑–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=main_menu()); return
        by = {}
        for t in rows: by.setdefault(dstr(t.date), []).append(t)
        parts = []
        for ds in sorted(by.keys(), key=lambda s: parse_date(s)):
            parts.append(format_grouped(by[ds], header_date=ds)); parts.append("")
        await m.answer("\n".join(parts), reply_markup=main_menu())
    finally:
        sess.close()

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
async def add(m: types.Message):
    await m.answer("–û–ø–∏—à–∏ –∑–∞–¥–∞—á—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–¥–∞—Ç—É/–≤—Ä–µ–º—è/–∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å–ø–æ–∑–Ω–∞—é).")
    WAITING[m.chat.id] = {"mode":"add"}

@router.message(F.text == "‚úÖ –Ø —Å–¥–µ–ª–∞–ª‚Ä¶")
async def done_free(m: types.Message):
    await m.answer("–ù–∞–ø–∏—à–∏ —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–¥–µ–ª–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å–¥–µ–ª–∞–ª –∑–∞–∫–∞–∑—ã –∫-—ç–∫—Å–ø—Ä–æ —Ü–µ–Ω—Ç—Ä).")
    WAITING[m.chat.id] = {"mode":"done_text"}

@router.message(F.text == "üîé –ù–∞–π—Ç–∏")
async def search_prompt(m: types.Message):
    await m.answer("–ß—Ç–æ –∏—â–µ–º? (—Ç–µ–∫—Å—Ç/–∫–∞—Ç–µ–≥–æ—Ä–∏—è/–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è/–î–î.–ú–ú.–ì–ì–ì–ì)")
    WAITING[m.chat.id] = {"mode":"search"}

@router.message(F.text)
async def generic_text(m: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ —à–∞–≥–∏: add / done_text / edits / subtask / reminder / search."""
    state = WAITING.get(m.chat.id)
    sess = SessionLocal()

    try:
        if state is None:
            # —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥ = –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
            items = ai_parse_items(m.text.strip(), m.chat.id)
            created = 0
            for it in items:
                dt = parse_date(it["date"]) if it["date"] else now_local().date()
                tm = parse_time(it["time"]) if it["time"] else None
                t = Task(user_id=m.chat.id, date=dt, category=it["category"], subcategory=it["subcategory"],
                         text=it["task"], deadline=tm, repeat_rule=it["repeat"],
                         source=it["supplier"], is_repeating=bool(it["repeat"]))
                sess.add(t); created += 1
            sess.commit()
            await m.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {created}", reply_markup=main_menu())
            return

        mode = state.get("mode")

        if mode == "add":
            items = ai_parse_items(m.text.strip(), m.chat.id)
            created = 0
            for it in items:
                dt = parse_date(it["date"]) if it["date"] else now_local().date()
                tm = parse_time(it["time"]) if it["time"] else None
                sess.add(Task(user_id=m.chat.id, date=dt,
                              category=it["category"], subcategory=it["subcategory"],
                              text=it["task"], deadline=tm, repeat_rule=it["repeat"],
                              source=it["supplier"], is_repeating=bool(it["repeat"])))
                created += 1
            sess.commit()
            WAITING.pop(m.chat.id, None)
            await m.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {created}", reply_markup=main_menu())
            return

        if mode == "done_text":
            txt = m.text.lower()
            supplier = ""
            if any(x in txt for x in ["–∫-—ç–∫—Å–ø—Ä–æ","k-exp","–∫ —ç–∫—Å–ø—Ä–æ"]): supplier = "–ö-–≠–∫—Å–ø—Ä–æ"
            if "–≤—ã–ª–µ–≥–∂–∞–Ω" in txt: supplier = "–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞"
            rows = tasks_for_date(sess, m.chat.id, now_local().date())
            changed = 0; last = None
            for t in rows:
                if t.status=="–≤—ã–ø–æ–ª–Ω–µ–Ω–æ": continue
                low = (t.text or "").lower()
                if supplier and norm_sup(supplier) not in norm_sup(low): continue
                if not supplier and not any(w in low for w in ["–∑–∞–∫–∞–∑","–∑–∞–∫—É–ø","—Å–¥–µ–ª–∞–ª"]): continue
                t.status = "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"; last = t; changed += 1
            sess.commit()
            msg = f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º: {changed}."
            if changed and supplier and last:
                created = plan_next(sess, m.chat.id, supplier, last.category, last.subcategory)
                if created: msg += " –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏–µ–º–∫–∞/—Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑."
            WAITING.pop(m.chat.id, None)
            await m.answer(msg, reply_markup=main_menu())
            return

        if mode == "edit_text":
            tid = state["task_id"]
            t = sess.query(Task).filter(Task.id==tid, Task.user_id==m.chat.id).first()
            if not t: await m.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"); WAITING.pop(m.chat.id, None); return
            t.text = m.text.strip(); sess.commit()
            WAITING.pop(m.chat.id, None)
            await m.answer("‚úèÔ∏è –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.")
            return

        if mode == "edit_category":
            tid = state["task_id"]
            t = sess.query(Task).filter(Task.id==tid, Task.user_id==m.chat.id).first()
            if not t: await m.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"); WAITING.pop(m.chat.id, None); return
            t.category = m.text.strip(); sess.commit()
            WAITING.pop(m.chat.id, None)
            await m.answer("üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
            return

        if mode == "edit_subcategory":
            tid = state["task_id"]
            t = sess.query(Task).filter(Task.id==tid, Task.user_id==m.chat.id).first()
            if not t: await m.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"); WAITING.pop(m.chat.id, None); return
            t.subcategory = m.text.strip(); sess.commit()
            WAITING.pop(m.chat.id, None)
            await m.answer("üìÅ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
            return

        if mode == "edit_deadline":
            tid = state["task_id"]
            t = sess.query(Task).filter(Task.id==tid, Task.user_id==m.chat.id).first()
            if not t: await m.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"); WAITING.pop(m.chat.id, None); return
            try:
                t.deadline = parse_time(m.text.strip())
            except Exception:
                await m.answer("–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: –ß–ß:–ú–ú"); return
            sess.commit()
            WAITING.pop(m.chat.id, None)
            await m.answer("‚è∞ –î–µ–¥–ª–∞–π–Ω –æ–±–Ω–æ–≤–ª—ë–Ω.")
            return

        if mode == "add_subtask":
            tid = state["task_id"]
            if not m.text.strip():
                await m.answer("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –ø–æ–¥–∑–∞–¥–∞—á–∏.")
                return
            sess.add(Subtask(task_id=tid, text=m.text.strip(), status=""))
            sess.commit()
            WAITING.pop(m.chat.id, None)
            await m.answer("‚ûï –ü–æ–¥–∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
            return

        if mode == "set_reminder":
            tid = state["task_id"]
            try:
                s = m.text.strip()
                dd, tt = s.split()
                rdate = parse_date(dd); rtime = parse_time(tt)
            except Exception:
                await m.answer("–§–æ—Ä–º–∞—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú"); return
            sess.add(Reminder(user_id=m.chat.id, task_id=tid, date=rdate, time=rtime, fired=False))
            sess.commit()
            WAITING.pop(m.chat.id, None)
            await m.answer("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            return

        if mode == "search":
            q = m.text.strip().lower()
            filters = [Task.user_id==m.chat.id]
            # –µ—Å–ª–∏ –¥–∞—Ç–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ
            md = re.search(r"(\d{2}\.\d{2}\.\d{4})", q)
            if md:
                filters.append(Task.date==parse_date(md.group(1)))
            # —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            filters.append(or_(func.lower(Task.text).contains(q),
                               func.lower(Task.category).contains(q),
                               func.lower(Task.subcategory).contains(q)))
            rows = (sess.query(Task).filter(and_(*filters))
                    .order_by(Task.date.asc(),
                              Task.category.asc(),
                              Task.subcategory.asc()).limit(40).all())
            if not rows:
                await m.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            else:
                parts = []
                for i, t in enumerate(rows, 1):
                    dl = t.deadline.strftime("%H:%M") if t.deadline else "‚Äî"
                    parts.append(f"{i}. {dstr(t.date)} ‚Ä¢ {t.category}/{t.subcategory or '‚Äî'} ‚Ä¢ {t.text} (–¥–æ {dl})")
                await m.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n" + "\n".join(parts))
            WAITING.pop(m.chat.id, None)
            return

    finally:
        sess.close()

# -------------------- Inline callbacks (–∫–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–¥–∞—á–∏) --------------------
def task_card_kb(tid:int):
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=mk_cb("done", id=tid))
    kb.button(text="‚úèÔ∏è –¢–µ–∫—Å—Ç", callback_data=mk_cb("edit_text", id=tid))
    kb.button(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data=mk_cb("edit_category", id=tid))
    kb.button(text="üìÅ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data=mk_cb("edit_subcategory", id=tid))
    kb.button(text="‚è∞ –î–µ–¥–ª–∞–π–Ω", callback_data=mk_cb("edit_deadline", id=tid))
    kb.button(text="üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data=mk_cb("set_reminder", id=tid))
    kb.button(text="‚ûï –ü–æ–¥–∑–∞–¥–∞—á–∞", callback_data=mk_cb("add_subtask", id=tid))
    kb.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=mk_cb("del", id=tid))
    kb.adjust(2,2,2,2)
    return kb.as_markup()

@router.callback_query(F.data)
async def cb(c: types.CallbackQuery):
    data = parse_cb(c.data) if c.data and c.data!="noop" else None
    if not data:
        await c.answer()
        return
    a = data.get("a")
    uid = c.message.chat.id
    sess = SessionLocal()
    try:
        if a in ("open","page"):
            # –≤ —ç—Ç–æ–º –ø–æ—Ç–æ–∫–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º/–ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ "—Å–µ–≥–æ–¥–Ω—è"
            rows = tasks_for_date(sess, uid, now_local().date())
            items = [(short_line(t, i), t.id) for i,t in enumerate(rows, start=1)]
            page = int(data.get("p",1))
            total = max(1, (len(items)+PAGE-1)//PAGE)
            page = max(1, min(page, total))
            slice_items = items[(page-1)*PAGE:page*PAGE]
            kb = page_kb(slice_items, page, total, "open")
            try:
                await c.message.edit_reply_markup(reply_markup=kb)
            except Exception:
                pass
            await c.answer()
            return

        if a == "open":  # (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            tid = int(data.get("id"))

        if a == "done":
            tid = int(data.get("id"))
            t = sess.query(Task).filter(Task.id==tid, Task.user_id==uid).first()
            if not t: await c.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True); return
            t.status = "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"; sess.commit()
            sup = ""
            low = (t.text or "").lower()
            if any(x in low for x in ["–∫-—ç–∫—Å–ø—Ä–æ","k-exp","–∫ —ç–∫—Å–ø—Ä–æ"]): sup="–ö-–≠–∫—Å–ø—Ä–æ"
            if "–≤—ã–ª–µ–≥–∂–∞–Ω" in low: sup="–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞"
            msg = "‚úÖ –ì–æ—Ç–æ–≤–æ."
            if sup:
                created = plan_next(sess, uid, sup, t.category, t.subcategory)
                if created: msg += " –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏—ë–º–∫–∞/—Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑."
            await c.answer(msg, show_alert=True)
            return

        if a == "del":
            tid = int(data.get("id"))
            t = sess.query(Task).filter(Task.id==tid, Task.user_id==uid).first()
            if not t: await c.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True); return
            sess.delete(t); sess.commit()
            await c.answer("–£–¥–∞–ª–µ–Ω–æ", show_alert=True)
            return

        # --- –ø—Ä–æ–≤–∞–ª–∏–≤–∞–Ω–∏–µ: –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É ---
        if a == "open_task":
            tid = int(data.get("id"))
            t = sess.query(Task).filter(Task.id==tid, Task.user_id==uid).first()
            if not t: await c.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True); return
            dl = t.deadline.strftime("%H:%M") if t.deadline else "‚Äî"
            text = (f"<b>{t.text}</b>\n"
                    f"üìÖ {weekday_ru(t.date)} ‚Äî {dstr(t.date)}\n"
                    f"üìÅ {t.category}/{t.subcategory or '‚Äî'}\n"
                    f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {dl}\n"
                    f"üìù –°—Ç–∞—Ç—É—Å: {t.status or '‚Äî'}")
            await c.message.answer(text, reply_markup=task_card_kb(t.id))
            await c.answer()
            return

        # –ö–Ω–æ–ø–∫–∏ –ø—Ä–∞–≤–æ–∫
        if a in ("edit_text","edit_category","edit_subcategory","edit_deadline","add_subtask","set_reminder"):
            WAITING[uid] = {"mode": a, "task_id": int(data.get("id"))}
            prompts = {
                "edit_text": "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:",
                "edit_category": "–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:",
                "edit_subcategory": "–ù–æ–≤–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:",
                "edit_deadline": "–ù–æ–≤–æ–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú):",
                "add_subtask": "–¢–µ–∫—Å—Ç –ø–æ–¥–∑–∞–¥–∞—á–∏:",
                "set_reminder": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú",
            }
            await c.message.answer(prompts[a])
            await c.answer()
            return

    finally:
        sess.close()

# -------------------- Background jobs: reminders + digest --------------------
async def reminders_loop():
    await bot.delete_webhook(drop_pending_updates=True)  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    while True:
        try:
            sess = SessionLocal()
            now = now_local()
            today = now.date(); cur_t = now.time()
            rows = (sess.query(Reminder)
                    .filter(Reminder.fired==False,
                            or_(Reminder.date < today,
                                and_(Reminder.date==today, Reminder.time <= cur_t)))
                    ).all()
            for r in rows:
                t = sess.query(Task).filter(Task.id==r.task_id, Task.user_id==r.user_id).first()
                txt = f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {t.text if t else '–∑–∞–¥–∞—á–∞'} ({dstr(r.date)} {r.time.strftime('%H:%M')})"
                try:
                    await bot.send_message(r.user_id, txt)
                except Exception as e:
                    log.warning("remind send failed: %s", e)
                r.fired = True
            if rows:
                sess.commit()
        except Exception as e:
            log.error("reminders_loop error: %s", e)
        finally:
            sess.close()
        await asyncio.sleep(30)

async def daily_digest_loop():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≤ 08:00 –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."""
    while True:
        now = now_local()
        target = now.replace(hour=8, minute=0, second=0, microsecond=0)
        if now > target:
            target = target + timedelta(days=1)
        wait = (target - now).total_seconds()
        await asyncio.sleep(wait)

        sess = SessionLocal()
        try:
            today = now_local().date()
            users = sess.query(User).all()
            for u in users:
                expand_repeats_for_date(sess, u.id, today)
                tasks = tasks_for_date(sess, u.id, today)
                if not tasks: continue
                text = f"üìÖ –ü–ª–∞–Ω –Ω–∞ {dstr(today)}\n\n" + format_grouped(tasks, header_date=dstr(today))
                try:
                    await bot.send_message(u.id, text)
                except Exception as e:
                    log.error("digest send error: %s", e)
        finally:
            sess.close()

# -------------------- Hook routers --------------------
dp.include_router(router)
